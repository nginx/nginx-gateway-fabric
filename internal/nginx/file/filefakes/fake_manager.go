// Code generated by counterfeiter. DO NOT EDIT.
package filefakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/nginx/file"
)

type FakeManager struct {
	WriteHTTPConfigStub        func(string, []byte) error
	writeHTTPConfigMutex       sync.RWMutex
	writeHTTPConfigArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	writeHTTPConfigReturns struct {
		result1 error
	}
	writeHTTPConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) WriteHTTPConfig(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.writeHTTPConfigMutex.Lock()
	ret, specificReturn := fake.writeHTTPConfigReturnsOnCall[len(fake.writeHTTPConfigArgsForCall)]
	fake.writeHTTPConfigArgsForCall = append(fake.writeHTTPConfigArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.WriteHTTPConfigStub
	fakeReturns := fake.writeHTTPConfigReturns
	fake.recordInvocation("WriteHTTPConfig", []interface{}{arg1, arg2Copy})
	fake.writeHTTPConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) WriteHTTPConfigCallCount() int {
	fake.writeHTTPConfigMutex.RLock()
	defer fake.writeHTTPConfigMutex.RUnlock()
	return len(fake.writeHTTPConfigArgsForCall)
}

func (fake *FakeManager) WriteHTTPConfigCalls(stub func(string, []byte) error) {
	fake.writeHTTPConfigMutex.Lock()
	defer fake.writeHTTPConfigMutex.Unlock()
	fake.WriteHTTPConfigStub = stub
}

func (fake *FakeManager) WriteHTTPConfigArgsForCall(i int) (string, []byte) {
	fake.writeHTTPConfigMutex.RLock()
	defer fake.writeHTTPConfigMutex.RUnlock()
	argsForCall := fake.writeHTTPConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) WriteHTTPConfigReturns(result1 error) {
	fake.writeHTTPConfigMutex.Lock()
	defer fake.writeHTTPConfigMutex.Unlock()
	fake.WriteHTTPConfigStub = nil
	fake.writeHTTPConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) WriteHTTPConfigReturnsOnCall(i int, result1 error) {
	fake.writeHTTPConfigMutex.Lock()
	defer fake.writeHTTPConfigMutex.Unlock()
	fake.WriteHTTPConfigStub = nil
	if fake.writeHTTPConfigReturnsOnCall == nil {
		fake.writeHTTPConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeHTTPConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeHTTPConfigMutex.RLock()
	defer fake.writeHTTPConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ file.Manager = new(FakeManager)
