// Code generated by counterfeiter. DO NOT EDIT.
package filefakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/nginx/file"
)

type FakeManager struct {
	WriteHTTPServersConfigStub        func(string, []byte) error
	writeHTTPServersConfigMutex       sync.RWMutex
	writeHTTPServersConfigArgsForCall []struct {
		arg1 string
		arg2 []byte
	}
	writeHTTPServersConfigReturns struct {
		result1 error
	}
	writeHTTPServersConfigReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) WriteHTTPServersConfig(arg1 string, arg2 []byte) error {
	var arg2Copy []byte
	if arg2 != nil {
		arg2Copy = make([]byte, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.writeHTTPServersConfigMutex.Lock()
	ret, specificReturn := fake.writeHTTPServersConfigReturnsOnCall[len(fake.writeHTTPServersConfigArgsForCall)]
	fake.writeHTTPServersConfigArgsForCall = append(fake.writeHTTPServersConfigArgsForCall, struct {
		arg1 string
		arg2 []byte
	}{arg1, arg2Copy})
	stub := fake.WriteHTTPServersConfigStub
	fakeReturns := fake.writeHTTPServersConfigReturns
	fake.recordInvocation("WriteHTTPServersConfig", []interface{}{arg1, arg2Copy})
	fake.writeHTTPServersConfigMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) WriteHTTPServersConfigCallCount() int {
	fake.writeHTTPServersConfigMutex.RLock()
	defer fake.writeHTTPServersConfigMutex.RUnlock()
	return len(fake.writeHTTPServersConfigArgsForCall)
}

func (fake *FakeManager) WriteHTTPServersConfigCalls(stub func(string, []byte) error) {
	fake.writeHTTPServersConfigMutex.Lock()
	defer fake.writeHTTPServersConfigMutex.Unlock()
	fake.WriteHTTPServersConfigStub = stub
}

func (fake *FakeManager) WriteHTTPServersConfigArgsForCall(i int) (string, []byte) {
	fake.writeHTTPServersConfigMutex.RLock()
	defer fake.writeHTTPServersConfigMutex.RUnlock()
	argsForCall := fake.writeHTTPServersConfigArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeManager) WriteHTTPServersConfigReturns(result1 error) {
	fake.writeHTTPServersConfigMutex.Lock()
	defer fake.writeHTTPServersConfigMutex.Unlock()
	fake.WriteHTTPServersConfigStub = nil
	fake.writeHTTPServersConfigReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) WriteHTTPServersConfigReturnsOnCall(i int, result1 error) {
	fake.writeHTTPServersConfigMutex.Lock()
	defer fake.writeHTTPServersConfigMutex.Unlock()
	fake.WriteHTTPServersConfigStub = nil
	if fake.writeHTTPServersConfigReturnsOnCall == nil {
		fake.writeHTTPServersConfigReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.writeHTTPServersConfigReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.writeHTTPServersConfigMutex.RLock()
	defer fake.writeHTTPServersConfigMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ file.Manager = new(FakeManager)
