// Code generated by counterfeiter. DO NOT EDIT.
package eventsfakes

import (
	"context"
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/events"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeCachedReader struct {
	GetStub        func(context.Context, types.NamespacedName, client.Object) error
	getMutex       sync.RWMutex
	getArgsForCall []struct {
		arg1 context.Context
		arg2 types.NamespacedName
		arg3 client.Object
	}
	getReturns struct {
		result1 error
	}
	getReturnsOnCall map[int]struct {
		result1 error
	}
	ListStub        func(context.Context, client.ObjectList, ...client.ListOption) error
	listMutex       sync.RWMutex
	listArgsForCall []struct {
		arg1 context.Context
		arg2 client.ObjectList
		arg3 []client.ListOption
	}
	listReturns struct {
		result1 error
	}
	listReturnsOnCall map[int]struct {
		result1 error
	}
	WaitForCacheSyncStub        func(context.Context) bool
	waitForCacheSyncMutex       sync.RWMutex
	waitForCacheSyncArgsForCall []struct {
		arg1 context.Context
	}
	waitForCacheSyncReturns struct {
		result1 bool
	}
	waitForCacheSyncReturnsOnCall map[int]struct {
		result1 bool
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCachedReader) Get(arg1 context.Context, arg2 types.NamespacedName, arg3 client.Object) error {
	fake.getMutex.Lock()
	ret, specificReturn := fake.getReturnsOnCall[len(fake.getArgsForCall)]
	fake.getArgsForCall = append(fake.getArgsForCall, struct {
		arg1 context.Context
		arg2 types.NamespacedName
		arg3 client.Object
	}{arg1, arg2, arg3})
	stub := fake.GetStub
	fakeReturns := fake.getReturns
	fake.recordInvocation("Get", []interface{}{arg1, arg2, arg3})
	fake.getMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCachedReader) GetCallCount() int {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	return len(fake.getArgsForCall)
}

func (fake *FakeCachedReader) GetCalls(stub func(context.Context, types.NamespacedName, client.Object) error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = stub
}

func (fake *FakeCachedReader) GetArgsForCall(i int) (context.Context, types.NamespacedName, client.Object) {
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	argsForCall := fake.getArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCachedReader) GetReturns(result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	fake.getReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCachedReader) GetReturnsOnCall(i int, result1 error) {
	fake.getMutex.Lock()
	defer fake.getMutex.Unlock()
	fake.GetStub = nil
	if fake.getReturnsOnCall == nil {
		fake.getReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.getReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCachedReader) List(arg1 context.Context, arg2 client.ObjectList, arg3 ...client.ListOption) error {
	fake.listMutex.Lock()
	ret, specificReturn := fake.listReturnsOnCall[len(fake.listArgsForCall)]
	fake.listArgsForCall = append(fake.listArgsForCall, struct {
		arg1 context.Context
		arg2 client.ObjectList
		arg3 []client.ListOption
	}{arg1, arg2, arg3})
	stub := fake.ListStub
	fakeReturns := fake.listReturns
	fake.recordInvocation("List", []interface{}{arg1, arg2, arg3})
	fake.listMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3...)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCachedReader) ListCallCount() int {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	return len(fake.listArgsForCall)
}

func (fake *FakeCachedReader) ListCalls(stub func(context.Context, client.ObjectList, ...client.ListOption) error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = stub
}

func (fake *FakeCachedReader) ListArgsForCall(i int) (context.Context, client.ObjectList, []client.ListOption) {
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	argsForCall := fake.listArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeCachedReader) ListReturns(result1 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	fake.listReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeCachedReader) ListReturnsOnCall(i int, result1 error) {
	fake.listMutex.Lock()
	defer fake.listMutex.Unlock()
	fake.ListStub = nil
	if fake.listReturnsOnCall == nil {
		fake.listReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.listReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeCachedReader) WaitForCacheSync(arg1 context.Context) bool {
	fake.waitForCacheSyncMutex.Lock()
	ret, specificReturn := fake.waitForCacheSyncReturnsOnCall[len(fake.waitForCacheSyncArgsForCall)]
	fake.waitForCacheSyncArgsForCall = append(fake.waitForCacheSyncArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.WaitForCacheSyncStub
	fakeReturns := fake.waitForCacheSyncReturns
	fake.recordInvocation("WaitForCacheSync", []interface{}{arg1})
	fake.waitForCacheSyncMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCachedReader) WaitForCacheSyncCallCount() int {
	fake.waitForCacheSyncMutex.RLock()
	defer fake.waitForCacheSyncMutex.RUnlock()
	return len(fake.waitForCacheSyncArgsForCall)
}

func (fake *FakeCachedReader) WaitForCacheSyncCalls(stub func(context.Context) bool) {
	fake.waitForCacheSyncMutex.Lock()
	defer fake.waitForCacheSyncMutex.Unlock()
	fake.WaitForCacheSyncStub = stub
}

func (fake *FakeCachedReader) WaitForCacheSyncArgsForCall(i int) context.Context {
	fake.waitForCacheSyncMutex.RLock()
	defer fake.waitForCacheSyncMutex.RUnlock()
	argsForCall := fake.waitForCacheSyncArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCachedReader) WaitForCacheSyncReturns(result1 bool) {
	fake.waitForCacheSyncMutex.Lock()
	defer fake.waitForCacheSyncMutex.Unlock()
	fake.WaitForCacheSyncStub = nil
	fake.waitForCacheSyncReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCachedReader) WaitForCacheSyncReturnsOnCall(i int, result1 bool) {
	fake.waitForCacheSyncMutex.Lock()
	defer fake.waitForCacheSyncMutex.Unlock()
	fake.WaitForCacheSyncStub = nil
	if fake.waitForCacheSyncReturnsOnCall == nil {
		fake.waitForCacheSyncReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.waitForCacheSyncReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCachedReader) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getMutex.RLock()
	defer fake.getMutex.RUnlock()
	fake.listMutex.RLock()
	defer fake.listMutex.RUnlock()
	fake.waitForCacheSyncMutex.RLock()
	defer fake.waitForCacheSyncMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCachedReader) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ events.CachedReader = new(FakeCachedReader)
