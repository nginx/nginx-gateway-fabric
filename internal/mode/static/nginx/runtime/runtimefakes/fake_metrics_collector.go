// Code generated by counterfeiter. DO NOT EDIT.
package runtimefakes

import (
	"sync"
	"time"

	"github.com/nginx/nginx-gateway-fabric/internal/mode/static/nginx/runtime"
)

type FakeMetricsCollector struct {
	IncReloadCountStub        func()
	incReloadCountMutex       sync.RWMutex
	incReloadCountArgsForCall []struct {
	}
	IncReloadErrorsStub        func()
	incReloadErrorsMutex       sync.RWMutex
	incReloadErrorsArgsForCall []struct {
	}
	ObserveLastReloadTimeStub        func(time.Duration)
	observeLastReloadTimeMutex       sync.RWMutex
	observeLastReloadTimeArgsForCall []struct {
		arg1 time.Duration
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeMetricsCollector) IncReloadCount() {
	fake.incReloadCountMutex.Lock()
	fake.incReloadCountArgsForCall = append(fake.incReloadCountArgsForCall, struct {
	}{})
	stub := fake.IncReloadCountStub
	fake.recordInvocation("IncReloadCount", []interface{}{})
	fake.incReloadCountMutex.Unlock()
	if stub != nil {
		fake.IncReloadCountStub()
	}
}

func (fake *FakeMetricsCollector) IncReloadCountCallCount() int {
	fake.incReloadCountMutex.RLock()
	defer fake.incReloadCountMutex.RUnlock()
	return len(fake.incReloadCountArgsForCall)
}

func (fake *FakeMetricsCollector) IncReloadCountCalls(stub func()) {
	fake.incReloadCountMutex.Lock()
	defer fake.incReloadCountMutex.Unlock()
	fake.IncReloadCountStub = stub
}

func (fake *FakeMetricsCollector) IncReloadErrors() {
	fake.incReloadErrorsMutex.Lock()
	fake.incReloadErrorsArgsForCall = append(fake.incReloadErrorsArgsForCall, struct {
	}{})
	stub := fake.IncReloadErrorsStub
	fake.recordInvocation("IncReloadErrors", []interface{}{})
	fake.incReloadErrorsMutex.Unlock()
	if stub != nil {
		fake.IncReloadErrorsStub()
	}
}

func (fake *FakeMetricsCollector) IncReloadErrorsCallCount() int {
	fake.incReloadErrorsMutex.RLock()
	defer fake.incReloadErrorsMutex.RUnlock()
	return len(fake.incReloadErrorsArgsForCall)
}

func (fake *FakeMetricsCollector) IncReloadErrorsCalls(stub func()) {
	fake.incReloadErrorsMutex.Lock()
	defer fake.incReloadErrorsMutex.Unlock()
	fake.IncReloadErrorsStub = stub
}

func (fake *FakeMetricsCollector) ObserveLastReloadTime(arg1 time.Duration) {
	fake.observeLastReloadTimeMutex.Lock()
	fake.observeLastReloadTimeArgsForCall = append(fake.observeLastReloadTimeArgsForCall, struct {
		arg1 time.Duration
	}{arg1})
	stub := fake.ObserveLastReloadTimeStub
	fake.recordInvocation("ObserveLastReloadTime", []interface{}{arg1})
	fake.observeLastReloadTimeMutex.Unlock()
	if stub != nil {
		fake.ObserveLastReloadTimeStub(arg1)
	}
}

func (fake *FakeMetricsCollector) ObserveLastReloadTimeCallCount() int {
	fake.observeLastReloadTimeMutex.RLock()
	defer fake.observeLastReloadTimeMutex.RUnlock()
	return len(fake.observeLastReloadTimeArgsForCall)
}

func (fake *FakeMetricsCollector) ObserveLastReloadTimeCalls(stub func(time.Duration)) {
	fake.observeLastReloadTimeMutex.Lock()
	defer fake.observeLastReloadTimeMutex.Unlock()
	fake.ObserveLastReloadTimeStub = stub
}

func (fake *FakeMetricsCollector) ObserveLastReloadTimeArgsForCall(i int) time.Duration {
	fake.observeLastReloadTimeMutex.RLock()
	defer fake.observeLastReloadTimeMutex.RUnlock()
	argsForCall := fake.observeLastReloadTimeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeMetricsCollector) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.incReloadCountMutex.RLock()
	defer fake.incReloadCountMutex.RUnlock()
	fake.incReloadErrorsMutex.RLock()
	defer fake.incReloadErrorsMutex.RUnlock()
	fake.observeLastReloadTimeMutex.RLock()
	defer fake.observeLastReloadTimeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeMetricsCollector) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ runtime.MetricsCollector = new(FakeMetricsCollector)
