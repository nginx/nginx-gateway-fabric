// Code generated by counterfeiter. DO NOT EDIT.
package agentfakes

import (
	"sync"

	"github.com/nginx/nginx-gateway-fabric/internal/mode/static/nginx/agent"
)

type FakeNginxUpdater struct {
	UpdateConfigStub        func(int)
	updateConfigMutex       sync.RWMutex
	updateConfigArgsForCall []struct {
		arg1 int
	}
	UpdateUpstreamServersStub        func()
	updateUpstreamServersMutex       sync.RWMutex
	updateUpstreamServersArgsForCall []struct {
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeNginxUpdater) UpdateConfig(arg1 int) {
	fake.updateConfigMutex.Lock()
	fake.updateConfigArgsForCall = append(fake.updateConfigArgsForCall, struct {
		arg1 int
	}{arg1})
	stub := fake.UpdateConfigStub
	fake.recordInvocation("UpdateConfig", []interface{}{arg1})
	fake.updateConfigMutex.Unlock()
	if stub != nil {
		fake.UpdateConfigStub(arg1)
	}
}

func (fake *FakeNginxUpdater) UpdateConfigCallCount() int {
	fake.updateConfigMutex.RLock()
	defer fake.updateConfigMutex.RUnlock()
	return len(fake.updateConfigArgsForCall)
}

func (fake *FakeNginxUpdater) UpdateConfigCalls(stub func(int)) {
	fake.updateConfigMutex.Lock()
	defer fake.updateConfigMutex.Unlock()
	fake.UpdateConfigStub = stub
}

func (fake *FakeNginxUpdater) UpdateConfigArgsForCall(i int) int {
	fake.updateConfigMutex.RLock()
	defer fake.updateConfigMutex.RUnlock()
	argsForCall := fake.updateConfigArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeNginxUpdater) UpdateUpstreamServers() {
	fake.updateUpstreamServersMutex.Lock()
	fake.updateUpstreamServersArgsForCall = append(fake.updateUpstreamServersArgsForCall, struct {
	}{})
	stub := fake.UpdateUpstreamServersStub
	fake.recordInvocation("UpdateUpstreamServers", []interface{}{})
	fake.updateUpstreamServersMutex.Unlock()
	if stub != nil {
		fake.UpdateUpstreamServersStub()
	}
}

func (fake *FakeNginxUpdater) UpdateUpstreamServersCallCount() int {
	fake.updateUpstreamServersMutex.RLock()
	defer fake.updateUpstreamServersMutex.RUnlock()
	return len(fake.updateUpstreamServersArgsForCall)
}

func (fake *FakeNginxUpdater) UpdateUpstreamServersCalls(stub func()) {
	fake.updateUpstreamServersMutex.Lock()
	defer fake.updateUpstreamServersMutex.Unlock()
	fake.UpdateUpstreamServersStub = stub
}

func (fake *FakeNginxUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.updateConfigMutex.RLock()
	defer fake.updateConfigMutex.RUnlock()
	fake.updateUpstreamServersMutex.RLock()
	defer fake.updateUpstreamServersMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeNginxUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ agent.NginxUpdater = new(FakeNginxUpdater)
