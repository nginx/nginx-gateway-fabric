// Code generated by counterfeiter. DO NOT EDIT.
package filefakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/mode/static/nginx/file"
)

type FakeManager struct {
	ReplaceFilesStub        func([]file.File) error
	replaceFilesMutex       sync.RWMutex
	replaceFilesArgsForCall []struct {
		arg1 []file.File
	}
	replaceFilesReturns struct {
		result1 error
	}
	replaceFilesReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeManager) ReplaceFiles(arg1 []file.File) error {
	var arg1Copy []file.File
	if arg1 != nil {
		arg1Copy = make([]file.File, len(arg1))
		copy(arg1Copy, arg1)
	}
	fake.replaceFilesMutex.Lock()
	ret, specificReturn := fake.replaceFilesReturnsOnCall[len(fake.replaceFilesArgsForCall)]
	fake.replaceFilesArgsForCall = append(fake.replaceFilesArgsForCall, struct {
		arg1 []file.File
	}{arg1Copy})
	stub := fake.ReplaceFilesStub
	fakeReturns := fake.replaceFilesReturns
	fake.recordInvocation("ReplaceFiles", []interface{}{arg1Copy})
	fake.replaceFilesMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeManager) ReplaceFilesCallCount() int {
	fake.replaceFilesMutex.RLock()
	defer fake.replaceFilesMutex.RUnlock()
	return len(fake.replaceFilesArgsForCall)
}

func (fake *FakeManager) ReplaceFilesCalls(stub func([]file.File) error) {
	fake.replaceFilesMutex.Lock()
	defer fake.replaceFilesMutex.Unlock()
	fake.ReplaceFilesStub = stub
}

func (fake *FakeManager) ReplaceFilesArgsForCall(i int) []file.File {
	fake.replaceFilesMutex.RLock()
	defer fake.replaceFilesMutex.RUnlock()
	argsForCall := fake.replaceFilesArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeManager) ReplaceFilesReturns(result1 error) {
	fake.replaceFilesMutex.Lock()
	defer fake.replaceFilesMutex.Unlock()
	fake.ReplaceFilesStub = nil
	fake.replaceFilesReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) ReplaceFilesReturnsOnCall(i int, result1 error) {
	fake.replaceFilesMutex.Lock()
	defer fake.replaceFilesMutex.Unlock()
	fake.ReplaceFilesStub = nil
	if fake.replaceFilesReturnsOnCall == nil {
		fake.replaceFilesReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.replaceFilesReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.replaceFilesMutex.RLock()
	defer fake.replaceFilesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ file.Manager = new(FakeManager)
