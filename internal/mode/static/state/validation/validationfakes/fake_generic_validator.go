// Code generated by counterfeiter. DO NOT EDIT.
package validationfakes

import (
	"sync"

	"github.com/nginxinc/nginx-gateway-fabric/internal/mode/static/state/validation"
)

type FakeGenericValidator struct {
	ValidateEndpointStub        func(string) error
	validateEndpointMutex       sync.RWMutex
	validateEndpointArgsForCall []struct {
		arg1 string
	}
	validateEndpointReturns struct {
		result1 error
	}
	validateEndpointReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateEscapedStringNoVarExpansionStub        func(string) error
	validateEscapedStringNoVarExpansionMutex       sync.RWMutex
	validateEscapedStringNoVarExpansionArgsForCall []struct {
		arg1 string
	}
	validateEscapedStringNoVarExpansionReturns struct {
		result1 error
	}
	validateEscapedStringNoVarExpansionReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateNginxDurationStub        func(string) error
	validateNginxDurationMutex       sync.RWMutex
	validateNginxDurationArgsForCall []struct {
		arg1 string
	}
	validateNginxDurationReturns struct {
		result1 error
	}
	validateNginxDurationReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateNginxSizeStub        func(string) error
	validateNginxSizeMutex       sync.RWMutex
	validateNginxSizeArgsForCall []struct {
		arg1 string
	}
	validateNginxSizeReturns struct {
		result1 error
	}
	validateNginxSizeReturnsOnCall map[int]struct {
		result1 error
	}
	ValidateServiceNameStub        func(string) error
	validateServiceNameMutex       sync.RWMutex
	validateServiceNameArgsForCall []struct {
		arg1 string
	}
	validateServiceNameReturns struct {
		result1 error
	}
	validateServiceNameReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeGenericValidator) ValidateEndpoint(arg1 string) error {
	fake.validateEndpointMutex.Lock()
	ret, specificReturn := fake.validateEndpointReturnsOnCall[len(fake.validateEndpointArgsForCall)]
	fake.validateEndpointArgsForCall = append(fake.validateEndpointArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateEndpointStub
	fakeReturns := fake.validateEndpointReturns
	fake.recordInvocation("ValidateEndpoint", []interface{}{arg1})
	fake.validateEndpointMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenericValidator) ValidateEndpointCallCount() int {
	fake.validateEndpointMutex.RLock()
	defer fake.validateEndpointMutex.RUnlock()
	return len(fake.validateEndpointArgsForCall)
}

func (fake *FakeGenericValidator) ValidateEndpointCalls(stub func(string) error) {
	fake.validateEndpointMutex.Lock()
	defer fake.validateEndpointMutex.Unlock()
	fake.ValidateEndpointStub = stub
}

func (fake *FakeGenericValidator) ValidateEndpointArgsForCall(i int) string {
	fake.validateEndpointMutex.RLock()
	defer fake.validateEndpointMutex.RUnlock()
	argsForCall := fake.validateEndpointArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGenericValidator) ValidateEndpointReturns(result1 error) {
	fake.validateEndpointMutex.Lock()
	defer fake.validateEndpointMutex.Unlock()
	fake.ValidateEndpointStub = nil
	fake.validateEndpointReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateEndpointReturnsOnCall(i int, result1 error) {
	fake.validateEndpointMutex.Lock()
	defer fake.validateEndpointMutex.Unlock()
	fake.ValidateEndpointStub = nil
	if fake.validateEndpointReturnsOnCall == nil {
		fake.validateEndpointReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateEndpointReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateEscapedStringNoVarExpansion(arg1 string) error {
	fake.validateEscapedStringNoVarExpansionMutex.Lock()
	ret, specificReturn := fake.validateEscapedStringNoVarExpansionReturnsOnCall[len(fake.validateEscapedStringNoVarExpansionArgsForCall)]
	fake.validateEscapedStringNoVarExpansionArgsForCall = append(fake.validateEscapedStringNoVarExpansionArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateEscapedStringNoVarExpansionStub
	fakeReturns := fake.validateEscapedStringNoVarExpansionReturns
	fake.recordInvocation("ValidateEscapedStringNoVarExpansion", []interface{}{arg1})
	fake.validateEscapedStringNoVarExpansionMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenericValidator) ValidateEscapedStringNoVarExpansionCallCount() int {
	fake.validateEscapedStringNoVarExpansionMutex.RLock()
	defer fake.validateEscapedStringNoVarExpansionMutex.RUnlock()
	return len(fake.validateEscapedStringNoVarExpansionArgsForCall)
}

func (fake *FakeGenericValidator) ValidateEscapedStringNoVarExpansionCalls(stub func(string) error) {
	fake.validateEscapedStringNoVarExpansionMutex.Lock()
	defer fake.validateEscapedStringNoVarExpansionMutex.Unlock()
	fake.ValidateEscapedStringNoVarExpansionStub = stub
}

func (fake *FakeGenericValidator) ValidateEscapedStringNoVarExpansionArgsForCall(i int) string {
	fake.validateEscapedStringNoVarExpansionMutex.RLock()
	defer fake.validateEscapedStringNoVarExpansionMutex.RUnlock()
	argsForCall := fake.validateEscapedStringNoVarExpansionArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGenericValidator) ValidateEscapedStringNoVarExpansionReturns(result1 error) {
	fake.validateEscapedStringNoVarExpansionMutex.Lock()
	defer fake.validateEscapedStringNoVarExpansionMutex.Unlock()
	fake.ValidateEscapedStringNoVarExpansionStub = nil
	fake.validateEscapedStringNoVarExpansionReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateEscapedStringNoVarExpansionReturnsOnCall(i int, result1 error) {
	fake.validateEscapedStringNoVarExpansionMutex.Lock()
	defer fake.validateEscapedStringNoVarExpansionMutex.Unlock()
	fake.ValidateEscapedStringNoVarExpansionStub = nil
	if fake.validateEscapedStringNoVarExpansionReturnsOnCall == nil {
		fake.validateEscapedStringNoVarExpansionReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateEscapedStringNoVarExpansionReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateNginxDuration(arg1 string) error {
	fake.validateNginxDurationMutex.Lock()
	ret, specificReturn := fake.validateNginxDurationReturnsOnCall[len(fake.validateNginxDurationArgsForCall)]
	fake.validateNginxDurationArgsForCall = append(fake.validateNginxDurationArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateNginxDurationStub
	fakeReturns := fake.validateNginxDurationReturns
	fake.recordInvocation("ValidateNginxDuration", []interface{}{arg1})
	fake.validateNginxDurationMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenericValidator) ValidateNginxDurationCallCount() int {
	fake.validateNginxDurationMutex.RLock()
	defer fake.validateNginxDurationMutex.RUnlock()
	return len(fake.validateNginxDurationArgsForCall)
}

func (fake *FakeGenericValidator) ValidateNginxDurationCalls(stub func(string) error) {
	fake.validateNginxDurationMutex.Lock()
	defer fake.validateNginxDurationMutex.Unlock()
	fake.ValidateNginxDurationStub = stub
}

func (fake *FakeGenericValidator) ValidateNginxDurationArgsForCall(i int) string {
	fake.validateNginxDurationMutex.RLock()
	defer fake.validateNginxDurationMutex.RUnlock()
	argsForCall := fake.validateNginxDurationArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGenericValidator) ValidateNginxDurationReturns(result1 error) {
	fake.validateNginxDurationMutex.Lock()
	defer fake.validateNginxDurationMutex.Unlock()
	fake.ValidateNginxDurationStub = nil
	fake.validateNginxDurationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateNginxDurationReturnsOnCall(i int, result1 error) {
	fake.validateNginxDurationMutex.Lock()
	defer fake.validateNginxDurationMutex.Unlock()
	fake.ValidateNginxDurationStub = nil
	if fake.validateNginxDurationReturnsOnCall == nil {
		fake.validateNginxDurationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateNginxDurationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateNginxSize(arg1 string) error {
	fake.validateNginxSizeMutex.Lock()
	ret, specificReturn := fake.validateNginxSizeReturnsOnCall[len(fake.validateNginxSizeArgsForCall)]
	fake.validateNginxSizeArgsForCall = append(fake.validateNginxSizeArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateNginxSizeStub
	fakeReturns := fake.validateNginxSizeReturns
	fake.recordInvocation("ValidateNginxSize", []interface{}{arg1})
	fake.validateNginxSizeMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenericValidator) ValidateNginxSizeCallCount() int {
	fake.validateNginxSizeMutex.RLock()
	defer fake.validateNginxSizeMutex.RUnlock()
	return len(fake.validateNginxSizeArgsForCall)
}

func (fake *FakeGenericValidator) ValidateNginxSizeCalls(stub func(string) error) {
	fake.validateNginxSizeMutex.Lock()
	defer fake.validateNginxSizeMutex.Unlock()
	fake.ValidateNginxSizeStub = stub
}

func (fake *FakeGenericValidator) ValidateNginxSizeArgsForCall(i int) string {
	fake.validateNginxSizeMutex.RLock()
	defer fake.validateNginxSizeMutex.RUnlock()
	argsForCall := fake.validateNginxSizeArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGenericValidator) ValidateNginxSizeReturns(result1 error) {
	fake.validateNginxSizeMutex.Lock()
	defer fake.validateNginxSizeMutex.Unlock()
	fake.ValidateNginxSizeStub = nil
	fake.validateNginxSizeReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateNginxSizeReturnsOnCall(i int, result1 error) {
	fake.validateNginxSizeMutex.Lock()
	defer fake.validateNginxSizeMutex.Unlock()
	fake.ValidateNginxSizeStub = nil
	if fake.validateNginxSizeReturnsOnCall == nil {
		fake.validateNginxSizeReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateNginxSizeReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateServiceName(arg1 string) error {
	fake.validateServiceNameMutex.Lock()
	ret, specificReturn := fake.validateServiceNameReturnsOnCall[len(fake.validateServiceNameArgsForCall)]
	fake.validateServiceNameArgsForCall = append(fake.validateServiceNameArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.ValidateServiceNameStub
	fakeReturns := fake.validateServiceNameReturns
	fake.recordInvocation("ValidateServiceName", []interface{}{arg1})
	fake.validateServiceNameMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeGenericValidator) ValidateServiceNameCallCount() int {
	fake.validateServiceNameMutex.RLock()
	defer fake.validateServiceNameMutex.RUnlock()
	return len(fake.validateServiceNameArgsForCall)
}

func (fake *FakeGenericValidator) ValidateServiceNameCalls(stub func(string) error) {
	fake.validateServiceNameMutex.Lock()
	defer fake.validateServiceNameMutex.Unlock()
	fake.ValidateServiceNameStub = stub
}

func (fake *FakeGenericValidator) ValidateServiceNameArgsForCall(i int) string {
	fake.validateServiceNameMutex.RLock()
	defer fake.validateServiceNameMutex.RUnlock()
	argsForCall := fake.validateServiceNameArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeGenericValidator) ValidateServiceNameReturns(result1 error) {
	fake.validateServiceNameMutex.Lock()
	defer fake.validateServiceNameMutex.Unlock()
	fake.ValidateServiceNameStub = nil
	fake.validateServiceNameReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) ValidateServiceNameReturnsOnCall(i int, result1 error) {
	fake.validateServiceNameMutex.Lock()
	defer fake.validateServiceNameMutex.Unlock()
	fake.ValidateServiceNameStub = nil
	if fake.validateServiceNameReturnsOnCall == nil {
		fake.validateServiceNameReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateServiceNameReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeGenericValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.validateEndpointMutex.RLock()
	defer fake.validateEndpointMutex.RUnlock()
	fake.validateEscapedStringNoVarExpansionMutex.RLock()
	defer fake.validateEscapedStringNoVarExpansionMutex.RUnlock()
	fake.validateNginxDurationMutex.RLock()
	defer fake.validateNginxDurationMutex.RUnlock()
	fake.validateNginxSizeMutex.RLock()
	defer fake.validateNginxSizeMutex.RUnlock()
	fake.validateServiceNameMutex.RLock()
	defer fake.validateServiceNameMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeGenericValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ validation.GenericValidator = new(FakeGenericValidator)
