// Code generated by counterfeiter. DO NOT EDIT.
package validationfakes

import (
	"sync"

	"github.com/nginxinc/nginx-gateway-fabric/internal/mode/static/policies"
	"github.com/nginxinc/nginx-gateway-fabric/internal/mode/static/state/validation"
)

type FakePolicyValidator struct {
	ConflictsStub        func(policies.Policy, policies.Policy) bool
	conflictsMutex       sync.RWMutex
	conflictsArgsForCall []struct {
		arg1 policies.Policy
		arg2 policies.Policy
	}
	conflictsReturns struct {
		result1 bool
	}
	conflictsReturnsOnCall map[int]struct {
		result1 bool
	}
	ValidateStub        func(policies.Policy) error
	validateMutex       sync.RWMutex
	validateArgsForCall []struct {
		arg1 policies.Policy
	}
	validateReturns struct {
		result1 error
	}
	validateReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakePolicyValidator) Conflicts(arg1 policies.Policy, arg2 policies.Policy) bool {
	fake.conflictsMutex.Lock()
	ret, specificReturn := fake.conflictsReturnsOnCall[len(fake.conflictsArgsForCall)]
	fake.conflictsArgsForCall = append(fake.conflictsArgsForCall, struct {
		arg1 policies.Policy
		arg2 policies.Policy
	}{arg1, arg2})
	stub := fake.ConflictsStub
	fakeReturns := fake.conflictsReturns
	fake.recordInvocation("Conflicts", []interface{}{arg1, arg2})
	fake.conflictsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePolicyValidator) ConflictsCallCount() int {
	fake.conflictsMutex.RLock()
	defer fake.conflictsMutex.RUnlock()
	return len(fake.conflictsArgsForCall)
}

func (fake *FakePolicyValidator) ConflictsCalls(stub func(policies.Policy, policies.Policy) bool) {
	fake.conflictsMutex.Lock()
	defer fake.conflictsMutex.Unlock()
	fake.ConflictsStub = stub
}

func (fake *FakePolicyValidator) ConflictsArgsForCall(i int) (policies.Policy, policies.Policy) {
	fake.conflictsMutex.RLock()
	defer fake.conflictsMutex.RUnlock()
	argsForCall := fake.conflictsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakePolicyValidator) ConflictsReturns(result1 bool) {
	fake.conflictsMutex.Lock()
	defer fake.conflictsMutex.Unlock()
	fake.ConflictsStub = nil
	fake.conflictsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakePolicyValidator) ConflictsReturnsOnCall(i int, result1 bool) {
	fake.conflictsMutex.Lock()
	defer fake.conflictsMutex.Unlock()
	fake.ConflictsStub = nil
	if fake.conflictsReturnsOnCall == nil {
		fake.conflictsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.conflictsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakePolicyValidator) Validate(arg1 policies.Policy) error {
	fake.validateMutex.Lock()
	ret, specificReturn := fake.validateReturnsOnCall[len(fake.validateArgsForCall)]
	fake.validateArgsForCall = append(fake.validateArgsForCall, struct {
		arg1 policies.Policy
	}{arg1})
	stub := fake.ValidateStub
	fakeReturns := fake.validateReturns
	fake.recordInvocation("Validate", []interface{}{arg1})
	fake.validateMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakePolicyValidator) ValidateCallCount() int {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	return len(fake.validateArgsForCall)
}

func (fake *FakePolicyValidator) ValidateCalls(stub func(policies.Policy) error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = stub
}

func (fake *FakePolicyValidator) ValidateArgsForCall(i int) policies.Policy {
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	argsForCall := fake.validateArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakePolicyValidator) ValidateReturns(result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	fake.validateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakePolicyValidator) ValidateReturnsOnCall(i int, result1 error) {
	fake.validateMutex.Lock()
	defer fake.validateMutex.Unlock()
	fake.ValidateStub = nil
	if fake.validateReturnsOnCall == nil {
		fake.validateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.validateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakePolicyValidator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.conflictsMutex.RLock()
	defer fake.conflictsMutex.RUnlock()
	fake.validateMutex.RLock()
	defer fake.validateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakePolicyValidator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ validation.PolicyValidator = new(FakePolicyValidator)
