// Code generated by counterfeiter. DO NOT EDIT.
package relationshipfakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/mode/static/state/relationship"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/controller-runtime/pkg/client"
)

type FakeCapturer struct {
	CaptureStub        func(client.Object)
	captureMutex       sync.RWMutex
	captureArgsForCall []struct {
		arg1 client.Object
	}
	ExistsStub        func(client.Object, types.NamespacedName) bool
	existsMutex       sync.RWMutex
	existsArgsForCall []struct {
		arg1 client.Object
		arg2 types.NamespacedName
	}
	existsReturns struct {
		result1 bool
	}
	existsReturnsOnCall map[int]struct {
		result1 bool
	}
	RemoveStub        func(client.Object, types.NamespacedName)
	removeMutex       sync.RWMutex
	removeArgsForCall []struct {
		arg1 client.Object
		arg2 types.NamespacedName
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeCapturer) Capture(arg1 client.Object) {
	fake.captureMutex.Lock()
	fake.captureArgsForCall = append(fake.captureArgsForCall, struct {
		arg1 client.Object
	}{arg1})
	stub := fake.CaptureStub
	fake.recordInvocation("Capture", []interface{}{arg1})
	fake.captureMutex.Unlock()
	if stub != nil {
		fake.CaptureStub(arg1)
	}
}

func (fake *FakeCapturer) CaptureCallCount() int {
	fake.captureMutex.RLock()
	defer fake.captureMutex.RUnlock()
	return len(fake.captureArgsForCall)
}

func (fake *FakeCapturer) CaptureCalls(stub func(client.Object)) {
	fake.captureMutex.Lock()
	defer fake.captureMutex.Unlock()
	fake.CaptureStub = stub
}

func (fake *FakeCapturer) CaptureArgsForCall(i int) client.Object {
	fake.captureMutex.RLock()
	defer fake.captureMutex.RUnlock()
	argsForCall := fake.captureArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeCapturer) Exists(arg1 client.Object, arg2 types.NamespacedName) bool {
	fake.existsMutex.Lock()
	ret, specificReturn := fake.existsReturnsOnCall[len(fake.existsArgsForCall)]
	fake.existsArgsForCall = append(fake.existsArgsForCall, struct {
		arg1 client.Object
		arg2 types.NamespacedName
	}{arg1, arg2})
	stub := fake.ExistsStub
	fakeReturns := fake.existsReturns
	fake.recordInvocation("Exists", []interface{}{arg1, arg2})
	fake.existsMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeCapturer) ExistsCallCount() int {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	return len(fake.existsArgsForCall)
}

func (fake *FakeCapturer) ExistsCalls(stub func(client.Object, types.NamespacedName) bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = stub
}

func (fake *FakeCapturer) ExistsArgsForCall(i int) (client.Object, types.NamespacedName) {
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	argsForCall := fake.existsArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturer) ExistsReturns(result1 bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	fake.existsReturns = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCapturer) ExistsReturnsOnCall(i int, result1 bool) {
	fake.existsMutex.Lock()
	defer fake.existsMutex.Unlock()
	fake.ExistsStub = nil
	if fake.existsReturnsOnCall == nil {
		fake.existsReturnsOnCall = make(map[int]struct {
			result1 bool
		})
	}
	fake.existsReturnsOnCall[i] = struct {
		result1 bool
	}{result1}
}

func (fake *FakeCapturer) Remove(arg1 client.Object, arg2 types.NamespacedName) {
	fake.removeMutex.Lock()
	fake.removeArgsForCall = append(fake.removeArgsForCall, struct {
		arg1 client.Object
		arg2 types.NamespacedName
	}{arg1, arg2})
	stub := fake.RemoveStub
	fake.recordInvocation("Remove", []interface{}{arg1, arg2})
	fake.removeMutex.Unlock()
	if stub != nil {
		fake.RemoveStub(arg1, arg2)
	}
}

func (fake *FakeCapturer) RemoveCallCount() int {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	return len(fake.removeArgsForCall)
}

func (fake *FakeCapturer) RemoveCalls(stub func(client.Object, types.NamespacedName)) {
	fake.removeMutex.Lock()
	defer fake.removeMutex.Unlock()
	fake.RemoveStub = stub
}

func (fake *FakeCapturer) RemoveArgsForCall(i int) (client.Object, types.NamespacedName) {
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	argsForCall := fake.removeArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeCapturer) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.captureMutex.RLock()
	defer fake.captureMutex.RUnlock()
	fake.existsMutex.RLock()
	defer fake.existsMutex.RUnlock()
	fake.removeMutex.RLock()
	defer fake.removeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeCapturer) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ relationship.Capturer = new(FakeCapturer)
