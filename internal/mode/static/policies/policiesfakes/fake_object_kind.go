// Code generated by counterfeiter. DO NOT EDIT.
package policiesfakes

import (
	"sync"

	"k8s.io/apimachinery/pkg/runtime/schema"
)

type FakeObjectKind struct {
	GroupVersionKindStub        func() schema.GroupVersionKind
	groupVersionKindMutex       sync.RWMutex
	groupVersionKindArgsForCall []struct {
	}
	groupVersionKindReturns struct {
		result1 schema.GroupVersionKind
	}
	groupVersionKindReturnsOnCall map[int]struct {
		result1 schema.GroupVersionKind
	}
	SetGroupVersionKindStub        func(schema.GroupVersionKind)
	setGroupVersionKindMutex       sync.RWMutex
	setGroupVersionKindArgsForCall []struct {
		arg1 schema.GroupVersionKind
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeObjectKind) GroupVersionKind() schema.GroupVersionKind {
	fake.groupVersionKindMutex.Lock()
	ret, specificReturn := fake.groupVersionKindReturnsOnCall[len(fake.groupVersionKindArgsForCall)]
	fake.groupVersionKindArgsForCall = append(fake.groupVersionKindArgsForCall, struct {
	}{})
	stub := fake.GroupVersionKindStub
	fakeReturns := fake.groupVersionKindReturns
	fake.recordInvocation("GroupVersionKind", []interface{}{})
	fake.groupVersionKindMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObjectKind) GroupVersionKindCallCount() int {
	fake.groupVersionKindMutex.RLock()
	defer fake.groupVersionKindMutex.RUnlock()
	return len(fake.groupVersionKindArgsForCall)
}

func (fake *FakeObjectKind) GroupVersionKindCalls(stub func() schema.GroupVersionKind) {
	fake.groupVersionKindMutex.Lock()
	defer fake.groupVersionKindMutex.Unlock()
	fake.GroupVersionKindStub = stub
}

func (fake *FakeObjectKind) GroupVersionKindReturns(result1 schema.GroupVersionKind) {
	fake.groupVersionKindMutex.Lock()
	defer fake.groupVersionKindMutex.Unlock()
	fake.GroupVersionKindStub = nil
	fake.groupVersionKindReturns = struct {
		result1 schema.GroupVersionKind
	}{result1}
}

func (fake *FakeObjectKind) GroupVersionKindReturnsOnCall(i int, result1 schema.GroupVersionKind) {
	fake.groupVersionKindMutex.Lock()
	defer fake.groupVersionKindMutex.Unlock()
	fake.GroupVersionKindStub = nil
	if fake.groupVersionKindReturnsOnCall == nil {
		fake.groupVersionKindReturnsOnCall = make(map[int]struct {
			result1 schema.GroupVersionKind
		})
	}
	fake.groupVersionKindReturnsOnCall[i] = struct {
		result1 schema.GroupVersionKind
	}{result1}
}

func (fake *FakeObjectKind) SetGroupVersionKind(arg1 schema.GroupVersionKind) {
	fake.setGroupVersionKindMutex.Lock()
	fake.setGroupVersionKindArgsForCall = append(fake.setGroupVersionKindArgsForCall, struct {
		arg1 schema.GroupVersionKind
	}{arg1})
	stub := fake.SetGroupVersionKindStub
	fake.recordInvocation("SetGroupVersionKind", []interface{}{arg1})
	fake.setGroupVersionKindMutex.Unlock()
	if stub != nil {
		fake.SetGroupVersionKindStub(arg1)
	}
}

func (fake *FakeObjectKind) SetGroupVersionKindCallCount() int {
	fake.setGroupVersionKindMutex.RLock()
	defer fake.setGroupVersionKindMutex.RUnlock()
	return len(fake.setGroupVersionKindArgsForCall)
}

func (fake *FakeObjectKind) SetGroupVersionKindCalls(stub func(schema.GroupVersionKind)) {
	fake.setGroupVersionKindMutex.Lock()
	defer fake.setGroupVersionKindMutex.Unlock()
	fake.SetGroupVersionKindStub = stub
}

func (fake *FakeObjectKind) SetGroupVersionKindArgsForCall(i int) schema.GroupVersionKind {
	fake.setGroupVersionKindMutex.RLock()
	defer fake.setGroupVersionKindMutex.RUnlock()
	argsForCall := fake.setGroupVersionKindArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeObjectKind) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.groupVersionKindMutex.RLock()
	defer fake.groupVersionKindMutex.RUnlock()
	fake.setGroupVersionKindMutex.RLock()
	defer fake.setGroupVersionKindMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeObjectKind) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ schema.ObjectKind = new(FakeObjectKind)
