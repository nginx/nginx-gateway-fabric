// Code generated by counterfeiter. DO NOT EDIT.
package staticfakes

import (
	"sync"
)

type FakeLogLevelSetter struct {
	SetLevelStub        func(string) error
	setLevelMutex       sync.RWMutex
	setLevelArgsForCall []struct {
		arg1 string
	}
	setLevelReturns struct {
		result1 error
	}
	setLevelReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLogLevelSetter) SetLevel(arg1 string) error {
	fake.setLevelMutex.Lock()
	ret, specificReturn := fake.setLevelReturnsOnCall[len(fake.setLevelArgsForCall)]
	fake.setLevelArgsForCall = append(fake.setLevelArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.SetLevelStub
	fakeReturns := fake.setLevelReturns
	fake.recordInvocation("SetLevel", []interface{}{arg1})
	fake.setLevelMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeLogLevelSetter) SetLevelCallCount() int {
	fake.setLevelMutex.RLock()
	defer fake.setLevelMutex.RUnlock()
	return len(fake.setLevelArgsForCall)
}

func (fake *FakeLogLevelSetter) SetLevelCalls(stub func(string) error) {
	fake.setLevelMutex.Lock()
	defer fake.setLevelMutex.Unlock()
	fake.SetLevelStub = stub
}

func (fake *FakeLogLevelSetter) SetLevelArgsForCall(i int) string {
	fake.setLevelMutex.RLock()
	defer fake.setLevelMutex.RUnlock()
	argsForCall := fake.setLevelArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeLogLevelSetter) SetLevelReturns(result1 error) {
	fake.setLevelMutex.Lock()
	defer fake.setLevelMutex.Unlock()
	fake.SetLevelStub = nil
	fake.setLevelReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogLevelSetter) SetLevelReturnsOnCall(i int, result1 error) {
	fake.setLevelMutex.Lock()
	defer fake.setLevelMutex.Unlock()
	fake.SetLevelStub = nil
	if fake.setLevelReturnsOnCall == nil {
		fake.setLevelReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.setLevelReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeLogLevelSetter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.setLevelMutex.RLock()
	defer fake.setLevelMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLogLevelSetter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
