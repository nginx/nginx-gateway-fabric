// Code generated by counterfeiter. DO NOT EDIT.
package telemetryfakes

import (
	"context"
	"sync"

	"github.com/nginxinc/nginx-gateway-fabric/internal/mode/static/telemetry"
	telemetrya "github.com/nginxinc/telemetry-exporter/pkg/telemetry"
)

type FakeExporter struct {
	ExportStub        func(context.Context, telemetrya.Exportable) error
	exportMutex       sync.RWMutex
	exportArgsForCall []struct {
		arg1 context.Context
		arg2 telemetrya.Exportable
	}
	exportReturns struct {
		result1 error
	}
	exportReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeExporter) Export(arg1 context.Context, arg2 telemetrya.Exportable) error {
	fake.exportMutex.Lock()
	ret, specificReturn := fake.exportReturnsOnCall[len(fake.exportArgsForCall)]
	fake.exportArgsForCall = append(fake.exportArgsForCall, struct {
		arg1 context.Context
		arg2 telemetrya.Exportable
	}{arg1, arg2})
	stub := fake.ExportStub
	fakeReturns := fake.exportReturns
	fake.recordInvocation("Export", []interface{}{arg1, arg2})
	fake.exportMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeExporter) ExportCallCount() int {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	return len(fake.exportArgsForCall)
}

func (fake *FakeExporter) ExportCalls(stub func(context.Context, telemetrya.Exportable) error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = stub
}

func (fake *FakeExporter) ExportArgsForCall(i int) (context.Context, telemetrya.Exportable) {
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	argsForCall := fake.exportArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeExporter) ExportReturns(result1 error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = nil
	fake.exportReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeExporter) ExportReturnsOnCall(i int, result1 error) {
	fake.exportMutex.Lock()
	defer fake.exportMutex.Unlock()
	fake.ExportStub = nil
	if fake.exportReturnsOnCall == nil {
		fake.exportReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.exportReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeExporter) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.exportMutex.RLock()
	defer fake.exportMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeExporter) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ telemetry.Exporter = new(FakeExporter)
