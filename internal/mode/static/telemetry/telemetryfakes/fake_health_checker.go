// Code generated by counterfeiter. DO NOT EDIT.
package telemetryfakes

import (
	"sync"

	"github.com/nginxinc/nginx-gateway-fabric/internal/mode/static/telemetry"
)

type FakeHealthChecker struct {
	GetReadyChStub        func() <-chan struct{}
	getReadyChMutex       sync.RWMutex
	getReadyChArgsForCall []struct {
	}
	getReadyChReturns struct {
		result1 <-chan struct{}
	}
	getReadyChReturnsOnCall map[int]struct {
		result1 <-chan struct{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeHealthChecker) GetReadyCh() <-chan struct{} {
	fake.getReadyChMutex.Lock()
	ret, specificReturn := fake.getReadyChReturnsOnCall[len(fake.getReadyChArgsForCall)]
	fake.getReadyChArgsForCall = append(fake.getReadyChArgsForCall, struct {
	}{})
	stub := fake.GetReadyChStub
	fakeReturns := fake.getReadyChReturns
	fake.recordInvocation("GetReadyCh", []interface{}{})
	fake.getReadyChMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeHealthChecker) GetReadyChCallCount() int {
	fake.getReadyChMutex.RLock()
	defer fake.getReadyChMutex.RUnlock()
	return len(fake.getReadyChArgsForCall)
}

func (fake *FakeHealthChecker) GetReadyChCalls(stub func() <-chan struct{}) {
	fake.getReadyChMutex.Lock()
	defer fake.getReadyChMutex.Unlock()
	fake.GetReadyChStub = stub
}

func (fake *FakeHealthChecker) GetReadyChReturns(result1 <-chan struct{}) {
	fake.getReadyChMutex.Lock()
	defer fake.getReadyChMutex.Unlock()
	fake.GetReadyChStub = nil
	fake.getReadyChReturns = struct {
		result1 <-chan struct{}
	}{result1}
}

func (fake *FakeHealthChecker) GetReadyChReturnsOnCall(i int, result1 <-chan struct{}) {
	fake.getReadyChMutex.Lock()
	defer fake.getReadyChMutex.Unlock()
	fake.GetReadyChStub = nil
	if fake.getReadyChReturnsOnCall == nil {
		fake.getReadyChReturnsOnCall = make(map[int]struct {
			result1 <-chan struct{}
		})
	}
	fake.getReadyChReturnsOnCall[i] = struct {
		result1 <-chan struct{}
	}{result1}
}

func (fake *FakeHealthChecker) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getReadyChMutex.RLock()
	defer fake.getReadyChMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeHealthChecker) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ telemetry.HealthChecker = new(FakeHealthChecker)
