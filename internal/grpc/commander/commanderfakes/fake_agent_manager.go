// Code generated by counterfeiter. DO NOT EDIT.
package commanderfakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/grpc/commander"
)

type FakeAgentManager struct {
	AddAgentStub        func(commander.Agent)
	addAgentMutex       sync.RWMutex
	addAgentArgsForCall []struct {
		arg1 commander.Agent
	}
	GetAgentStub        func(string) commander.Agent
	getAgentMutex       sync.RWMutex
	getAgentArgsForCall []struct {
		arg1 string
	}
	getAgentReturns struct {
		result1 commander.Agent
	}
	getAgentReturnsOnCall map[int]struct {
		result1 commander.Agent
	}
	RemoveAgentStub        func(string)
	removeAgentMutex       sync.RWMutex
	removeAgentArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgentManager) AddAgent(arg1 commander.Agent) {
	fake.addAgentMutex.Lock()
	fake.addAgentArgsForCall = append(fake.addAgentArgsForCall, struct {
		arg1 commander.Agent
	}{arg1})
	stub := fake.AddAgentStub
	fake.recordInvocation("AddAgent", []interface{}{arg1})
	fake.addAgentMutex.Unlock()
	if stub != nil {
		fake.AddAgentStub(arg1)
	}
}

func (fake *FakeAgentManager) AddAgentCallCount() int {
	fake.addAgentMutex.RLock()
	defer fake.addAgentMutex.RUnlock()
	return len(fake.addAgentArgsForCall)
}

func (fake *FakeAgentManager) AddAgentCalls(stub func(commander.Agent)) {
	fake.addAgentMutex.Lock()
	defer fake.addAgentMutex.Unlock()
	fake.AddAgentStub = stub
}

func (fake *FakeAgentManager) AddAgentArgsForCall(i int) commander.Agent {
	fake.addAgentMutex.RLock()
	defer fake.addAgentMutex.RUnlock()
	argsForCall := fake.addAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentManager) GetAgent(arg1 string) commander.Agent {
	fake.getAgentMutex.Lock()
	ret, specificReturn := fake.getAgentReturnsOnCall[len(fake.getAgentArgsForCall)]
	fake.getAgentArgsForCall = append(fake.getAgentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetAgentStub
	fakeReturns := fake.getAgentReturns
	fake.recordInvocation("GetAgent", []interface{}{arg1})
	fake.getAgentMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgentManager) GetAgentCallCount() int {
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	return len(fake.getAgentArgsForCall)
}

func (fake *FakeAgentManager) GetAgentCalls(stub func(string) commander.Agent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = stub
}

func (fake *FakeAgentManager) GetAgentArgsForCall(i int) string {
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	argsForCall := fake.getAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentManager) GetAgentReturns(result1 commander.Agent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	fake.getAgentReturns = struct {
		result1 commander.Agent
	}{result1}
}

func (fake *FakeAgentManager) GetAgentReturnsOnCall(i int, result1 commander.Agent) {
	fake.getAgentMutex.Lock()
	defer fake.getAgentMutex.Unlock()
	fake.GetAgentStub = nil
	if fake.getAgentReturnsOnCall == nil {
		fake.getAgentReturnsOnCall = make(map[int]struct {
			result1 commander.Agent
		})
	}
	fake.getAgentReturnsOnCall[i] = struct {
		result1 commander.Agent
	}{result1}
}

func (fake *FakeAgentManager) RemoveAgent(arg1 string) {
	fake.removeAgentMutex.Lock()
	fake.removeAgentArgsForCall = append(fake.removeAgentArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveAgentStub
	fake.recordInvocation("RemoveAgent", []interface{}{arg1})
	fake.removeAgentMutex.Unlock()
	if stub != nil {
		fake.RemoveAgentStub(arg1)
	}
}

func (fake *FakeAgentManager) RemoveAgentCallCount() int {
	fake.removeAgentMutex.RLock()
	defer fake.removeAgentMutex.RUnlock()
	return len(fake.removeAgentArgsForCall)
}

func (fake *FakeAgentManager) RemoveAgentCalls(stub func(string)) {
	fake.removeAgentMutex.Lock()
	defer fake.removeAgentMutex.Unlock()
	fake.RemoveAgentStub = stub
}

func (fake *FakeAgentManager) RemoveAgentArgsForCall(i int) string {
	fake.removeAgentMutex.RLock()
	defer fake.removeAgentMutex.RUnlock()
	argsForCall := fake.removeAgentArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgentManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addAgentMutex.RLock()
	defer fake.addAgentMutex.RUnlock()
	fake.getAgentMutex.RLock()
	defer fake.getAgentMutex.RUnlock()
	fake.removeAgentMutex.RLock()
	defer fake.removeAgentMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAgentManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commander.AgentManager = new(FakeAgentManager)
