// Code generated by counterfeiter. DO NOT EDIT.
package commanderfakes

import (
	"sync"

	"github.com/nginx/agent/sdk/v2/proto"
	"github.com/nginxinc/nginx-kubernetes-gateway/internal/grpc/commander"
)

type FakeAgent struct {
	IDStub        func() string
	iDMutex       sync.RWMutex
	iDArgsForCall []struct {
	}
	iDReturns struct {
		result1 string
	}
	iDReturnsOnCall map[int]struct {
		result1 string
	}
	ReceiveFromUploadServerStub        func(proto.Commander_UploadServer) error
	receiveFromUploadServerMutex       sync.RWMutex
	receiveFromUploadServerArgsForCall []struct {
		arg1 proto.Commander_UploadServer
	}
	receiveFromUploadServerReturns struct {
		result1 error
	}
	receiveFromUploadServerReturnsOnCall map[int]struct {
		result1 error
	}
	StateStub        func() commander.State
	stateMutex       sync.RWMutex
	stateArgsForCall []struct {
	}
	stateReturns struct {
		result1 commander.State
	}
	stateReturnsOnCall map[int]struct {
		result1 commander.State
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAgent) ID() string {
	fake.iDMutex.Lock()
	ret, specificReturn := fake.iDReturnsOnCall[len(fake.iDArgsForCall)]
	fake.iDArgsForCall = append(fake.iDArgsForCall, struct {
	}{})
	stub := fake.IDStub
	fakeReturns := fake.iDReturns
	fake.recordInvocation("ID", []interface{}{})
	fake.iDMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgent) IDCallCount() int {
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	return len(fake.iDArgsForCall)
}

func (fake *FakeAgent) IDCalls(stub func() string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = stub
}

func (fake *FakeAgent) IDReturns(result1 string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	fake.iDReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeAgent) IDReturnsOnCall(i int, result1 string) {
	fake.iDMutex.Lock()
	defer fake.iDMutex.Unlock()
	fake.IDStub = nil
	if fake.iDReturnsOnCall == nil {
		fake.iDReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.iDReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeAgent) ReceiveFromUploadServer(arg1 proto.Commander_UploadServer) error {
	fake.receiveFromUploadServerMutex.Lock()
	ret, specificReturn := fake.receiveFromUploadServerReturnsOnCall[len(fake.receiveFromUploadServerArgsForCall)]
	fake.receiveFromUploadServerArgsForCall = append(fake.receiveFromUploadServerArgsForCall, struct {
		arg1 proto.Commander_UploadServer
	}{arg1})
	stub := fake.ReceiveFromUploadServerStub
	fakeReturns := fake.receiveFromUploadServerReturns
	fake.recordInvocation("ReceiveFromUploadServer", []interface{}{arg1})
	fake.receiveFromUploadServerMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgent) ReceiveFromUploadServerCallCount() int {
	fake.receiveFromUploadServerMutex.RLock()
	defer fake.receiveFromUploadServerMutex.RUnlock()
	return len(fake.receiveFromUploadServerArgsForCall)
}

func (fake *FakeAgent) ReceiveFromUploadServerCalls(stub func(proto.Commander_UploadServer) error) {
	fake.receiveFromUploadServerMutex.Lock()
	defer fake.receiveFromUploadServerMutex.Unlock()
	fake.ReceiveFromUploadServerStub = stub
}

func (fake *FakeAgent) ReceiveFromUploadServerArgsForCall(i int) proto.Commander_UploadServer {
	fake.receiveFromUploadServerMutex.RLock()
	defer fake.receiveFromUploadServerMutex.RUnlock()
	argsForCall := fake.receiveFromUploadServerArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeAgent) ReceiveFromUploadServerReturns(result1 error) {
	fake.receiveFromUploadServerMutex.Lock()
	defer fake.receiveFromUploadServerMutex.Unlock()
	fake.ReceiveFromUploadServerStub = nil
	fake.receiveFromUploadServerReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) ReceiveFromUploadServerReturnsOnCall(i int, result1 error) {
	fake.receiveFromUploadServerMutex.Lock()
	defer fake.receiveFromUploadServerMutex.Unlock()
	fake.ReceiveFromUploadServerStub = nil
	if fake.receiveFromUploadServerReturnsOnCall == nil {
		fake.receiveFromUploadServerReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.receiveFromUploadServerReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAgent) State() commander.State {
	fake.stateMutex.Lock()
	ret, specificReturn := fake.stateReturnsOnCall[len(fake.stateArgsForCall)]
	fake.stateArgsForCall = append(fake.stateArgsForCall, struct {
	}{})
	stub := fake.StateStub
	fakeReturns := fake.stateReturns
	fake.recordInvocation("State", []interface{}{})
	fake.stateMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAgent) StateCallCount() int {
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	return len(fake.stateArgsForCall)
}

func (fake *FakeAgent) StateCalls(stub func() commander.State) {
	fake.stateMutex.Lock()
	defer fake.stateMutex.Unlock()
	fake.StateStub = stub
}

func (fake *FakeAgent) StateReturns(result1 commander.State) {
	fake.stateMutex.Lock()
	defer fake.stateMutex.Unlock()
	fake.StateStub = nil
	fake.stateReturns = struct {
		result1 commander.State
	}{result1}
}

func (fake *FakeAgent) StateReturnsOnCall(i int, result1 commander.State) {
	fake.stateMutex.Lock()
	defer fake.stateMutex.Unlock()
	fake.StateStub = nil
	if fake.stateReturnsOnCall == nil {
		fake.stateReturnsOnCall = make(map[int]struct {
			result1 commander.State
		})
	}
	fake.stateReturnsOnCall[i] = struct {
		result1 commander.State
	}{result1}
}

func (fake *FakeAgent) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.iDMutex.RLock()
	defer fake.iDMutex.RUnlock()
	fake.receiveFromUploadServerMutex.RLock()
	defer fake.receiveFromUploadServerMutex.RUnlock()
	fake.stateMutex.RLock()
	defer fake.stateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAgent) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commander.Agent = new(FakeAgent)
