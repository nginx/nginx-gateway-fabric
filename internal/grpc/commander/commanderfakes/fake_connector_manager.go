// Code generated by counterfeiter. DO NOT EDIT.
package commanderfakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/grpc/commander"
)

type FakeConnectorManager struct {
	AddConnectorStub        func(commander.Connector)
	addConnectorMutex       sync.RWMutex
	addConnectorArgsForCall []struct {
		arg1 commander.Connector
	}
	GetConnectorStub        func(string) commander.Connector
	getConnectorMutex       sync.RWMutex
	getConnectorArgsForCall []struct {
		arg1 string
	}
	getConnectorReturns struct {
		result1 commander.Connector
	}
	getConnectorReturnsOnCall map[int]struct {
		result1 commander.Connector
	}
	RemoveConnectorStub        func(string)
	removeConnectorMutex       sync.RWMutex
	removeConnectorArgsForCall []struct {
		arg1 string
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConnectorManager) AddConnector(arg1 commander.Connector) {
	fake.addConnectorMutex.Lock()
	fake.addConnectorArgsForCall = append(fake.addConnectorArgsForCall, struct {
		arg1 commander.Connector
	}{arg1})
	stub := fake.AddConnectorStub
	fake.recordInvocation("AddConnector", []interface{}{arg1})
	fake.addConnectorMutex.Unlock()
	if stub != nil {
		fake.AddConnectorStub(arg1)
	}
}

func (fake *FakeConnectorManager) AddConnectorCallCount() int {
	fake.addConnectorMutex.RLock()
	defer fake.addConnectorMutex.RUnlock()
	return len(fake.addConnectorArgsForCall)
}

func (fake *FakeConnectorManager) AddConnectorCalls(stub func(commander.Connector)) {
	fake.addConnectorMutex.Lock()
	defer fake.addConnectorMutex.Unlock()
	fake.AddConnectorStub = stub
}

func (fake *FakeConnectorManager) AddConnectorArgsForCall(i int) commander.Connector {
	fake.addConnectorMutex.RLock()
	defer fake.addConnectorMutex.RUnlock()
	argsForCall := fake.addConnectorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnectorManager) GetConnector(arg1 string) commander.Connector {
	fake.getConnectorMutex.Lock()
	ret, specificReturn := fake.getConnectorReturnsOnCall[len(fake.getConnectorArgsForCall)]
	fake.getConnectorArgsForCall = append(fake.getConnectorArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.GetConnectorStub
	fakeReturns := fake.getConnectorReturns
	fake.recordInvocation("GetConnector", []interface{}{arg1})
	fake.getConnectorMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeConnectorManager) GetConnectorCallCount() int {
	fake.getConnectorMutex.RLock()
	defer fake.getConnectorMutex.RUnlock()
	return len(fake.getConnectorArgsForCall)
}

func (fake *FakeConnectorManager) GetConnectorCalls(stub func(string) commander.Connector) {
	fake.getConnectorMutex.Lock()
	defer fake.getConnectorMutex.Unlock()
	fake.GetConnectorStub = stub
}

func (fake *FakeConnectorManager) GetConnectorArgsForCall(i int) string {
	fake.getConnectorMutex.RLock()
	defer fake.getConnectorMutex.RUnlock()
	argsForCall := fake.getConnectorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnectorManager) GetConnectorReturns(result1 commander.Connector) {
	fake.getConnectorMutex.Lock()
	defer fake.getConnectorMutex.Unlock()
	fake.GetConnectorStub = nil
	fake.getConnectorReturns = struct {
		result1 commander.Connector
	}{result1}
}

func (fake *FakeConnectorManager) GetConnectorReturnsOnCall(i int, result1 commander.Connector) {
	fake.getConnectorMutex.Lock()
	defer fake.getConnectorMutex.Unlock()
	fake.GetConnectorStub = nil
	if fake.getConnectorReturnsOnCall == nil {
		fake.getConnectorReturnsOnCall = make(map[int]struct {
			result1 commander.Connector
		})
	}
	fake.getConnectorReturnsOnCall[i] = struct {
		result1 commander.Connector
	}{result1}
}

func (fake *FakeConnectorManager) RemoveConnector(arg1 string) {
	fake.removeConnectorMutex.Lock()
	fake.removeConnectorArgsForCall = append(fake.removeConnectorArgsForCall, struct {
		arg1 string
	}{arg1})
	stub := fake.RemoveConnectorStub
	fake.recordInvocation("RemoveConnector", []interface{}{arg1})
	fake.removeConnectorMutex.Unlock()
	if stub != nil {
		fake.RemoveConnectorStub(arg1)
	}
}

func (fake *FakeConnectorManager) RemoveConnectorCallCount() int {
	fake.removeConnectorMutex.RLock()
	defer fake.removeConnectorMutex.RUnlock()
	return len(fake.removeConnectorArgsForCall)
}

func (fake *FakeConnectorManager) RemoveConnectorCalls(stub func(string)) {
	fake.removeConnectorMutex.Lock()
	defer fake.removeConnectorMutex.Unlock()
	fake.RemoveConnectorStub = stub
}

func (fake *FakeConnectorManager) RemoveConnectorArgsForCall(i int) string {
	fake.removeConnectorMutex.RLock()
	defer fake.removeConnectorMutex.RUnlock()
	argsForCall := fake.removeConnectorArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConnectorManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.addConnectorMutex.RLock()
	defer fake.addConnectorMutex.RUnlock()
	fake.getConnectorMutex.RLock()
	defer fake.getConnectorMutex.RUnlock()
	fake.removeConnectorMutex.RLock()
	defer fake.removeConnectorMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConnectorManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ commander.ConnectorManager = new(FakeConnectorManager)
