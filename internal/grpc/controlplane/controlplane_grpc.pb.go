// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: controlplane.proto

package controlplane

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ControlPlaneClient is the client API for ControlPlane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ControlPlaneClient interface {
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_StreamMessagesClient, error)
}

type controlPlaneClient struct {
	cc grpc.ClientConnInterface
}

func NewControlPlaneClient(cc grpc.ClientConnInterface) ControlPlaneClient {
	return &controlPlaneClient{cc}
}

func (c *controlPlaneClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (ControlPlane_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &ControlPlane_ServiceDesc.Streams[0], "/controlplane.ControlPlane/StreamMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &controlPlaneStreamMessagesClient{stream}
	return x, nil
}

type ControlPlane_StreamMessagesClient interface {
	Send(*DataPlaneMessage) error
	Recv() (*ControlPlaneMessage, error)
	grpc.ClientStream
}

type controlPlaneStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *controlPlaneStreamMessagesClient) Send(m *DataPlaneMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *controlPlaneStreamMessagesClient) Recv() (*ControlPlaneMessage, error) {
	m := new(ControlPlaneMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlPlaneServer is the server API for ControlPlane service.
// All implementations must embed UnimplementedControlPlaneServer
// for forward compatibility
type ControlPlaneServer interface {
	StreamMessages(ControlPlane_StreamMessagesServer) error
	mustEmbedUnimplementedControlPlaneServer()
}

// UnimplementedControlPlaneServer must be embedded to have forward compatible implementations.
type UnimplementedControlPlaneServer struct {
}

func (UnimplementedControlPlaneServer) StreamMessages(ControlPlane_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedControlPlaneServer) mustEmbedUnimplementedControlPlaneServer() {}

// UnsafeControlPlaneServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ControlPlaneServer will
// result in compilation errors.
type UnsafeControlPlaneServer interface {
	mustEmbedUnimplementedControlPlaneServer()
}

func RegisterControlPlaneServer(s grpc.ServiceRegistrar, srv ControlPlaneServer) {
	s.RegisterService(&ControlPlane_ServiceDesc, srv)
}

func _ControlPlane_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ControlPlaneServer).StreamMessages(&controlPlaneStreamMessagesServer{stream})
}

type ControlPlane_StreamMessagesServer interface {
	Send(*ControlPlaneMessage) error
	Recv() (*DataPlaneMessage, error)
	grpc.ServerStream
}

type controlPlaneStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *controlPlaneStreamMessagesServer) Send(m *ControlPlaneMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *controlPlaneStreamMessagesServer) Recv() (*DataPlaneMessage, error) {
	m := new(DataPlaneMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ControlPlane_ServiceDesc is the grpc.ServiceDesc for ControlPlane service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ControlPlane_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controlplane.ControlPlane",
	HandlerType: (*ControlPlaneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _ControlPlane_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "controlplane.proto",
}
