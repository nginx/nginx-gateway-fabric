// Code generated by counterfeiter. DO NOT EDIT.
package statefakes

import (
	"sync"

	"github.com/nginxinc/nginx-gateway-kubernetes/internal/state"
	"k8s.io/apimachinery/pkg/types"
	"sigs.k8s.io/gateway-api/apis/v1alpha2"
)

type FakeConfiguration struct {
	DeleteHTTPRouteStub        func(types.NamespacedName) ([]state.Change, []state.StatusUpdate)
	deleteHTTPRouteMutex       sync.RWMutex
	deleteHTTPRouteArgsForCall []struct {
		arg1 types.NamespacedName
	}
	deleteHTTPRouteReturns struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}
	deleteHTTPRouteReturnsOnCall map[int]struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}
	UpsertHTTPRouteStub        func(*v1alpha2.HTTPRoute) ([]state.Change, []state.StatusUpdate)
	upsertHTTPRouteMutex       sync.RWMutex
	upsertHTTPRouteArgsForCall []struct {
		arg1 *v1alpha2.HTTPRoute
	}
	upsertHTTPRouteReturns struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}
	upsertHTTPRouteReturnsOnCall map[int]struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeConfiguration) DeleteHTTPRoute(arg1 types.NamespacedName) ([]state.Change, []state.StatusUpdate) {
	fake.deleteHTTPRouteMutex.Lock()
	ret, specificReturn := fake.deleteHTTPRouteReturnsOnCall[len(fake.deleteHTTPRouteArgsForCall)]
	fake.deleteHTTPRouteArgsForCall = append(fake.deleteHTTPRouteArgsForCall, struct {
		arg1 types.NamespacedName
	}{arg1})
	stub := fake.DeleteHTTPRouteStub
	fakeReturns := fake.deleteHTTPRouteReturns
	fake.recordInvocation("DeleteHTTPRoute", []interface{}{arg1})
	fake.deleteHTTPRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfiguration) DeleteHTTPRouteCallCount() int {
	fake.deleteHTTPRouteMutex.RLock()
	defer fake.deleteHTTPRouteMutex.RUnlock()
	return len(fake.deleteHTTPRouteArgsForCall)
}

func (fake *FakeConfiguration) DeleteHTTPRouteCalls(stub func(types.NamespacedName) ([]state.Change, []state.StatusUpdate)) {
	fake.deleteHTTPRouteMutex.Lock()
	defer fake.deleteHTTPRouteMutex.Unlock()
	fake.DeleteHTTPRouteStub = stub
}

func (fake *FakeConfiguration) DeleteHTTPRouteArgsForCall(i int) types.NamespacedName {
	fake.deleteHTTPRouteMutex.RLock()
	defer fake.deleteHTTPRouteMutex.RUnlock()
	argsForCall := fake.deleteHTTPRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfiguration) DeleteHTTPRouteReturns(result1 []state.Change, result2 []state.StatusUpdate) {
	fake.deleteHTTPRouteMutex.Lock()
	defer fake.deleteHTTPRouteMutex.Unlock()
	fake.DeleteHTTPRouteStub = nil
	fake.deleteHTTPRouteReturns = struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}{result1, result2}
}

func (fake *FakeConfiguration) DeleteHTTPRouteReturnsOnCall(i int, result1 []state.Change, result2 []state.StatusUpdate) {
	fake.deleteHTTPRouteMutex.Lock()
	defer fake.deleteHTTPRouteMutex.Unlock()
	fake.DeleteHTTPRouteStub = nil
	if fake.deleteHTTPRouteReturnsOnCall == nil {
		fake.deleteHTTPRouteReturnsOnCall = make(map[int]struct {
			result1 []state.Change
			result2 []state.StatusUpdate
		})
	}
	fake.deleteHTTPRouteReturnsOnCall[i] = struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}{result1, result2}
}

func (fake *FakeConfiguration) UpsertHTTPRoute(arg1 *v1alpha2.HTTPRoute) ([]state.Change, []state.StatusUpdate) {
	fake.upsertHTTPRouteMutex.Lock()
	ret, specificReturn := fake.upsertHTTPRouteReturnsOnCall[len(fake.upsertHTTPRouteArgsForCall)]
	fake.upsertHTTPRouteArgsForCall = append(fake.upsertHTTPRouteArgsForCall, struct {
		arg1 *v1alpha2.HTTPRoute
	}{arg1})
	stub := fake.UpsertHTTPRouteStub
	fakeReturns := fake.upsertHTTPRouteReturns
	fake.recordInvocation("UpsertHTTPRoute", []interface{}{arg1})
	fake.upsertHTTPRouteMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeConfiguration) UpsertHTTPRouteCallCount() int {
	fake.upsertHTTPRouteMutex.RLock()
	defer fake.upsertHTTPRouteMutex.RUnlock()
	return len(fake.upsertHTTPRouteArgsForCall)
}

func (fake *FakeConfiguration) UpsertHTTPRouteCalls(stub func(*v1alpha2.HTTPRoute) ([]state.Change, []state.StatusUpdate)) {
	fake.upsertHTTPRouteMutex.Lock()
	defer fake.upsertHTTPRouteMutex.Unlock()
	fake.UpsertHTTPRouteStub = stub
}

func (fake *FakeConfiguration) UpsertHTTPRouteArgsForCall(i int) *v1alpha2.HTTPRoute {
	fake.upsertHTTPRouteMutex.RLock()
	defer fake.upsertHTTPRouteMutex.RUnlock()
	argsForCall := fake.upsertHTTPRouteArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeConfiguration) UpsertHTTPRouteReturns(result1 []state.Change, result2 []state.StatusUpdate) {
	fake.upsertHTTPRouteMutex.Lock()
	defer fake.upsertHTTPRouteMutex.Unlock()
	fake.UpsertHTTPRouteStub = nil
	fake.upsertHTTPRouteReturns = struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}{result1, result2}
}

func (fake *FakeConfiguration) UpsertHTTPRouteReturnsOnCall(i int, result1 []state.Change, result2 []state.StatusUpdate) {
	fake.upsertHTTPRouteMutex.Lock()
	defer fake.upsertHTTPRouteMutex.Unlock()
	fake.UpsertHTTPRouteStub = nil
	if fake.upsertHTTPRouteReturnsOnCall == nil {
		fake.upsertHTTPRouteReturnsOnCall = make(map[int]struct {
			result1 []state.Change
			result2 []state.StatusUpdate
		})
	}
	fake.upsertHTTPRouteReturnsOnCall[i] = struct {
		result1 []state.Change
		result2 []state.StatusUpdate
	}{result1, result2}
}

func (fake *FakeConfiguration) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteHTTPRouteMutex.RLock()
	defer fake.deleteHTTPRouteMutex.RUnlock()
	fake.upsertHTTPRouteMutex.RLock()
	defer fake.upsertHTTPRouteMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeConfiguration) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ state.Configuration = new(FakeConfiguration)
