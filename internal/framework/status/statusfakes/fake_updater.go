// Code generated by counterfeiter. DO NOT EDIT.
package statusfakes

import (
	"context"
	"sync"

	"github.com/nginxinc/nginx-gateway-fabric/internal/framework/status"
	v1 "sigs.k8s.io/gateway-api/apis/v1"
)

type FakeUpdater struct {
	DisableStub        func()
	disableMutex       sync.RWMutex
	disableArgsForCall []struct {
	}
	EnableStub        func(context.Context)
	enableMutex       sync.RWMutex
	enableArgsForCall []struct {
		arg1 context.Context
	}
	UpdateStub        func(context.Context, status.Status)
	updateMutex       sync.RWMutex
	updateArgsForCall []struct {
		arg1 context.Context
		arg2 status.Status
	}
	UpdateAddressesStub        func(context.Context, []v1.GatewayStatusAddress)
	updateAddressesMutex       sync.RWMutex
	updateAddressesArgsForCall []struct {
		arg1 context.Context
		arg2 []v1.GatewayStatusAddress
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeUpdater) Disable() {
	fake.disableMutex.Lock()
	fake.disableArgsForCall = append(fake.disableArgsForCall, struct {
	}{})
	stub := fake.DisableStub
	fake.recordInvocation("Disable", []interface{}{})
	fake.disableMutex.Unlock()
	if stub != nil {
		fake.DisableStub()
	}
}

func (fake *FakeUpdater) DisableCallCount() int {
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	return len(fake.disableArgsForCall)
}

func (fake *FakeUpdater) DisableCalls(stub func()) {
	fake.disableMutex.Lock()
	defer fake.disableMutex.Unlock()
	fake.DisableStub = stub
}

func (fake *FakeUpdater) Enable(arg1 context.Context) {
	fake.enableMutex.Lock()
	fake.enableArgsForCall = append(fake.enableArgsForCall, struct {
		arg1 context.Context
	}{arg1})
	stub := fake.EnableStub
	fake.recordInvocation("Enable", []interface{}{arg1})
	fake.enableMutex.Unlock()
	if stub != nil {
		fake.EnableStub(arg1)
	}
}

func (fake *FakeUpdater) EnableCallCount() int {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	return len(fake.enableArgsForCall)
}

func (fake *FakeUpdater) EnableCalls(stub func(context.Context)) {
	fake.enableMutex.Lock()
	defer fake.enableMutex.Unlock()
	fake.EnableStub = stub
}

func (fake *FakeUpdater) EnableArgsForCall(i int) context.Context {
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	argsForCall := fake.enableArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeUpdater) Update(arg1 context.Context, arg2 status.Status) {
	fake.updateMutex.Lock()
	fake.updateArgsForCall = append(fake.updateArgsForCall, struct {
		arg1 context.Context
		arg2 status.Status
	}{arg1, arg2})
	stub := fake.UpdateStub
	fake.recordInvocation("Update", []interface{}{arg1, arg2})
	fake.updateMutex.Unlock()
	if stub != nil {
		fake.UpdateStub(arg1, arg2)
	}
}

func (fake *FakeUpdater) UpdateCallCount() int {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	return len(fake.updateArgsForCall)
}

func (fake *FakeUpdater) UpdateCalls(stub func(context.Context, status.Status)) {
	fake.updateMutex.Lock()
	defer fake.updateMutex.Unlock()
	fake.UpdateStub = stub
}

func (fake *FakeUpdater) UpdateArgsForCall(i int) (context.Context, status.Status) {
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	argsForCall := fake.updateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUpdater) UpdateAddresses(arg1 context.Context, arg2 []v1.GatewayStatusAddress) {
	var arg2Copy []v1.GatewayStatusAddress
	if arg2 != nil {
		arg2Copy = make([]v1.GatewayStatusAddress, len(arg2))
		copy(arg2Copy, arg2)
	}
	fake.updateAddressesMutex.Lock()
	fake.updateAddressesArgsForCall = append(fake.updateAddressesArgsForCall, struct {
		arg1 context.Context
		arg2 []v1.GatewayStatusAddress
	}{arg1, arg2Copy})
	stub := fake.UpdateAddressesStub
	fake.recordInvocation("UpdateAddresses", []interface{}{arg1, arg2Copy})
	fake.updateAddressesMutex.Unlock()
	if stub != nil {
		fake.UpdateAddressesStub(arg1, arg2)
	}
}

func (fake *FakeUpdater) UpdateAddressesCallCount() int {
	fake.updateAddressesMutex.RLock()
	defer fake.updateAddressesMutex.RUnlock()
	return len(fake.updateAddressesArgsForCall)
}

func (fake *FakeUpdater) UpdateAddressesCalls(stub func(context.Context, []v1.GatewayStatusAddress)) {
	fake.updateAddressesMutex.Lock()
	defer fake.updateAddressesMutex.Unlock()
	fake.UpdateAddressesStub = stub
}

func (fake *FakeUpdater) UpdateAddressesArgsForCall(i int) (context.Context, []v1.GatewayStatusAddress) {
	fake.updateAddressesMutex.RLock()
	defer fake.updateAddressesMutex.RUnlock()
	argsForCall := fake.updateAddressesArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeUpdater) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.disableMutex.RLock()
	defer fake.disableMutex.RUnlock()
	fake.enableMutex.RLock()
	defer fake.enableMutex.RUnlock()
	fake.updateMutex.RLock()
	defer fake.updateMutex.RUnlock()
	fake.updateAddressesMutex.RLock()
	defer fake.updateAddressesMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeUpdater) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ status.Updater = new(FakeUpdater)
