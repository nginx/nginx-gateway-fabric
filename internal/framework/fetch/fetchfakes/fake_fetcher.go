// Code generated by counterfeiter. DO NOT EDIT.
package fetchfakes

import (
	"sync"

	"github.com/nginx/nginx-gateway-fabric/internal/framework/fetch"
)

type FakeFetcher struct {
	GetRemoteFileStub        func(string, ...fetch.Option) ([]byte, error)
	getRemoteFileMutex       sync.RWMutex
	getRemoteFileArgsForCall []struct {
		arg1 string
		arg2 []fetch.Option
	}
	getRemoteFileReturns struct {
		result1 []byte
		result2 error
	}
	getRemoteFileReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeFetcher) GetRemoteFile(arg1 string, arg2 ...fetch.Option) ([]byte, error) {
	fake.getRemoteFileMutex.Lock()
	ret, specificReturn := fake.getRemoteFileReturnsOnCall[len(fake.getRemoteFileArgsForCall)]
	fake.getRemoteFileArgsForCall = append(fake.getRemoteFileArgsForCall, struct {
		arg1 string
		arg2 []fetch.Option
	}{arg1, arg2})
	stub := fake.GetRemoteFileStub
	fakeReturns := fake.getRemoteFileReturns
	fake.recordInvocation("GetRemoteFile", []interface{}{arg1, arg2})
	fake.getRemoteFileMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2...)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeFetcher) GetRemoteFileCallCount() int {
	fake.getRemoteFileMutex.RLock()
	defer fake.getRemoteFileMutex.RUnlock()
	return len(fake.getRemoteFileArgsForCall)
}

func (fake *FakeFetcher) GetRemoteFileCalls(stub func(string, ...fetch.Option) ([]byte, error)) {
	fake.getRemoteFileMutex.Lock()
	defer fake.getRemoteFileMutex.Unlock()
	fake.GetRemoteFileStub = stub
}

func (fake *FakeFetcher) GetRemoteFileArgsForCall(i int) (string, []fetch.Option) {
	fake.getRemoteFileMutex.RLock()
	defer fake.getRemoteFileMutex.RUnlock()
	argsForCall := fake.getRemoteFileArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeFetcher) GetRemoteFileReturns(result1 []byte, result2 error) {
	fake.getRemoteFileMutex.Lock()
	defer fake.getRemoteFileMutex.Unlock()
	fake.GetRemoteFileStub = nil
	fake.getRemoteFileReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) GetRemoteFileReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.getRemoteFileMutex.Lock()
	defer fake.getRemoteFileMutex.Unlock()
	fake.GetRemoteFileStub = nil
	if fake.getRemoteFileReturnsOnCall == nil {
		fake.getRemoteFileReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.getRemoteFileReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeFetcher) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getRemoteFileMutex.RLock()
	defer fake.getRemoteFileMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeFetcher) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ fetch.Fetcher = new(FakeFetcher)
