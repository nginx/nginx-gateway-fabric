// Code generated by counterfeiter. DO NOT EDIT.
package reconcilerfakes

import (
	"sync"

	"github.com/nginxinc/nginx-kubernetes-gateway/internal/reconciler"
	"k8s.io/apimachinery/pkg/runtime"
)

type FakeEventRecorder struct {
	EventfStub        func(runtime.Object, string, string, string, ...interface{})
	eventfMutex       sync.RWMutex
	eventfArgsForCall []struct {
		arg1 runtime.Object
		arg2 string
		arg3 string
		arg4 string
		arg5 []interface{}
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeEventRecorder) Eventf(arg1 runtime.Object, arg2 string, arg3 string, arg4 string, arg5 ...interface{}) {
	fake.eventfMutex.Lock()
	fake.eventfArgsForCall = append(fake.eventfArgsForCall, struct {
		arg1 runtime.Object
		arg2 string
		arg3 string
		arg4 string
		arg5 []interface{}
	}{arg1, arg2, arg3, arg4, arg5})
	stub := fake.EventfStub
	fake.recordInvocation("Eventf", []interface{}{arg1, arg2, arg3, arg4, arg5})
	fake.eventfMutex.Unlock()
	if stub != nil {
		fake.EventfStub(arg1, arg2, arg3, arg4, arg5...)
	}
}

func (fake *FakeEventRecorder) EventfCallCount() int {
	fake.eventfMutex.RLock()
	defer fake.eventfMutex.RUnlock()
	return len(fake.eventfArgsForCall)
}

func (fake *FakeEventRecorder) EventfCalls(stub func(runtime.Object, string, string, string, ...interface{})) {
	fake.eventfMutex.Lock()
	defer fake.eventfMutex.Unlock()
	fake.EventfStub = stub
}

func (fake *FakeEventRecorder) EventfArgsForCall(i int) (runtime.Object, string, string, string, []interface{}) {
	fake.eventfMutex.RLock()
	defer fake.eventfMutex.RUnlock()
	argsForCall := fake.eventfArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3, argsForCall.arg4, argsForCall.arg5
}

func (fake *FakeEventRecorder) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.eventfMutex.RLock()
	defer fake.eventfMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeEventRecorder) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ reconciler.EventRecorder = new(FakeEventRecorder)
