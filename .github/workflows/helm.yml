name: Helm Testing

on:
  workflow_call:
    inputs:
      image:
        required: true
        type: string
      k8s-version:
        required: true
        type: string
      tag:
        required: false
        type: string
        default: ''

permissions:
  contents: read

jobs:
  helm-tests-local:
    name: Helm Tests Local
    runs-on: ubuntu-24.04
    if: ${{ github.event_name != 'schedule' && (!github.event.pull_request.head.repo.fork || inputs.image != 'plus') }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Download Artifacts
        uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
        with:
          name: dist-${{ github.run_id }}
          path: ${{ github.workspace }}/dist

      - name: Docker Buildx
        uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

      - name: NGF Docker meta
        id: ngf-meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            name=ghcr.io/nginx/nginx-gateway-fabric
          tags: |
            type=semver,pattern={{version}}
            type=edge
            type=schedule
            type=ref,event=pr
            type=ref,event=branch,suffix=-rc,enable=${{ startsWith(github.ref, 'refs/heads/release') && inputs.tag == '' }}
            type=raw,value=${{ inputs.tag }},enable=${{ inputs.tag != '' }}

      - name: NGINX Docker meta
        id: nginx-meta
        uses: docker/metadata-action@c1e51972afc2121e065aed6d45c65596fe445f3f # v5.8.0
        with:
          images: |
            name=ghcr.io/nginx/nginx-gateway-fabric/${{ inputs.image == 'plus' && 'nginx-plus' || inputs.image }}
          tags: |
            type=semver,pattern={{version}}
            type=edge
            type=schedule
            type=ref,event=pr
            type=ref,event=branch,suffix=-rc,enable=${{ startsWith(github.ref, 'refs/heads/release') && inputs.tag == '' }}
            type=raw,value=${{ inputs.tag }},enable=${{ inputs.tag != '' }}

      - name: Build NGF Docker Image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: build/Dockerfile
          tags: ${{ steps.ngf-meta.outputs.tags }}
          context: "."
          target: goreleaser
          load: true
          cache-from: type=gha,scope=ngf
          pull: true

      - name: Build NGINX Docker Image
        uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
        with:
          file: build/Dockerfile${{ inputs.image == 'nginx' && '.nginx' || '' }}${{ inputs.image == 'plus' && '.nginxplus' || ''}}
          tags: ${{ steps.nginx-meta.outputs.tags }}
          context: "."
          load: true
          cache-from: type=gha,scope=${{ inputs.image }}
          pull: true
          build-args: |
            NJS_DIR=internal/controller/nginx/modules/src
            NGINX_CONF_DIR=internal/controller/nginx/conf
            BUILD_AGENT=gha

      - name: Install cloud-provider-kind
        run: |
          CLOUD_PROVIDER_KIND_VERSION=v0.8.0 # renovate: datasource=github-tags depName=kubernetes-sigs/cloud-provider-kind
          go install sigs.k8s.io/cloud-provider-kind@${CLOUD_PROVIDER_KIND_VERSION}

      - name: Run cloud-provider-kind
        run: $(go env GOPATH)/bin/cloud-provider-kind & > cloud-provider-kind.log 2>&1

      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --image=kindest/node:${{ inputs.k8s-version }}
          kind load docker-image ${{ join(fromJSON(steps.ngf-meta.outputs.json).tags, ' ') }} ${{ join(fromJSON(steps.nginx-meta.outputs.json).tags, ' ') }} --name ${{ github.run_id }}
          kubectl kustomize config/crd/gateway-api/standard | kubectl apply -f -
          kubectl create namespace nginx-gateway

      - name: Create plus secret
        if: ${{ inputs.image == 'plus' }}
        env:
          PLUS_LICENSE: ${{ secrets.JWT_PLUS_REPORTING }}
        run: |
          echo "${PLUS_LICENSE}" > license.jwt
          kubectl create secret generic nplus-license --from-file license.jwt -n nginx-gateway

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.x"
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Install Chart
        run: |
          ct install --config .ct.yaml --namespace nginx-gateway --helm-extra-set-args="--set=nginxGateway.image.tag=${{ steps.ngf-meta.outputs.version }} \
          --set=nginx.image.repository=ghcr.io/nginx/nginx-gateway-fabric/nginx${{ inputs.image == 'plus' && '-plus' || ''}} \
          --set=nginx.plus=${{ inputs.image == 'plus' }} \
          --set=nginx.image.tag=${{ steps.nginx-meta.outputs.version }} \
          --set=nginxGateway.image.pullPolicy=Never \
          --set=nginx.image.pullPolicy=Never \
          --set=nginxGateway.productTelemetry.enable=false"

  helm-test-remote:
    name: Helm Tests Remote
    runs-on: ubuntu-24.04
    if: ${{ github.event_name == 'schedule' }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
        with:
          fetch-depth: 0

      - name: Install cloud-provider-kind
        run: |
          CLOUD_PROVIDER_KIND_VERSION=v0.8.0 # renovate: datasource=github-tags depName=kubernetes-sigs/cloud-provider-kind
          go install sigs.k8s.io/cloud-provider-kind@${CLOUD_PROVIDER_KIND_VERSION}

      - name: Run cloud-provider-kind
        run: $(go env GOPATH)/bin/cloud-provider-kind & > cloud-provider-kind.log 2>&1

      - name: Deploy Kubernetes
        id: k8s
        run: |
          kind create cluster --name ${{ github.run_id }} --image=kindest/node:${{ inputs.k8s-version }}
          kubectl kustomize config/crd/gateway-api/standard | kubectl apply -f -
          kubectl create namespace nginx-gateway

      - name: Create plus secrets
        if: ${{ inputs.image == 'plus' }}
        env:
          PLUS_LICENSE: ${{ secrets.JWT_PLUS_REPORTING }}
        run: |
          echo "${PLUS_LICENSE}" > license.jwt
          kubectl create secret docker-registry nginx-plus-registry-secret --docker-server=private-registry.nginx.com --docker-username=${{ secrets.JWT_PLUS_REGISTRY }} --docker-password=none -n nginx-gateway
          kubectl create secret generic nplus-license --from-file license.jwt -n nginx-gateway

      - name: Set up Python
        uses: actions/setup-python@e797f83bcb11b83ae66e0230d6156d7c80228e7c # v6.0.0
        with:
          python-version: "3.x"
          check-latest: true

      - name: Set up chart-testing
        uses: helm/chart-testing-action@0d28d3144d3a25ea2cc349d6e59901c4ff469b3b # v2.7.0

      - name: Install Chart
        run: |
          ct install --config .ct.yaml --all --namespace nginx-gateway --helm-extra-set-args="--set=nginxGateway.image.tag=nightly \
          --set=nginx.plus=${{ inputs.image == 'plus' }} \
          --set=nginx.image.tag=nightly \
          --set=nginxGateway.productTelemetry.enable=false \
          ${{ inputs.image == 'plus' && '--set=nginx.imagePullSecret=nginx-plus-registry-secret --set=nginx.image.repository=private-registry.nginx.com/nginx-gateway-fabric/nginx-plus' || '' }}"
