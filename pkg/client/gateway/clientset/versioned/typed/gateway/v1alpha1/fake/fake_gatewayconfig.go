// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"

	v1alpha1 "github.com/nginxinc/nginx-gateway-kubernetes/pkg/apis/gateway/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeGatewayConfigs implements GatewayConfigInterface
type FakeGatewayConfigs struct {
	Fake *FakeGatewayV1alpha1
}

var gatewayconfigsResource = schema.GroupVersionResource{Group: "gateway.nginx.org", Version: "v1alpha1", Resource: "gatewayconfigs"}

var gatewayconfigsKind = schema.GroupVersionKind{Group: "gateway.nginx.org", Version: "v1alpha1", Kind: "GatewayConfig"}

// Get takes name of the gatewayConfig, and returns the corresponding gatewayConfig object, and an error if there is any.
func (c *FakeGatewayConfigs) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.GatewayConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(gatewayconfigsResource, name), &v1alpha1.GatewayConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GatewayConfig), err
}

// List takes label and field selectors, and returns the list of GatewayConfigs that match those selectors.
func (c *FakeGatewayConfigs) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.GatewayConfigList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(gatewayconfigsResource, gatewayconfigsKind, opts), &v1alpha1.GatewayConfigList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.GatewayConfigList{ListMeta: obj.(*v1alpha1.GatewayConfigList).ListMeta}
	for _, item := range obj.(*v1alpha1.GatewayConfigList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested gatewayConfigs.
func (c *FakeGatewayConfigs) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(gatewayconfigsResource, opts))
}

// Create takes the representation of a gatewayConfig and creates it.  Returns the server's representation of the gatewayConfig, and an error, if there is any.
func (c *FakeGatewayConfigs) Create(ctx context.Context, gatewayConfig *v1alpha1.GatewayConfig, opts v1.CreateOptions) (result *v1alpha1.GatewayConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(gatewayconfigsResource, gatewayConfig), &v1alpha1.GatewayConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GatewayConfig), err
}

// Update takes the representation of a gatewayConfig and updates it. Returns the server's representation of the gatewayConfig, and an error, if there is any.
func (c *FakeGatewayConfigs) Update(ctx context.Context, gatewayConfig *v1alpha1.GatewayConfig, opts v1.UpdateOptions) (result *v1alpha1.GatewayConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(gatewayconfigsResource, gatewayConfig), &v1alpha1.GatewayConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GatewayConfig), err
}

// Delete takes name of the gatewayConfig and deletes it. Returns an error if one occurs.
func (c *FakeGatewayConfigs) Delete(ctx context.Context, name string, opts v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(gatewayconfigsResource, name), &v1alpha1.GatewayConfig{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeGatewayConfigs) DeleteCollection(ctx context.Context, opts v1.DeleteOptions, listOpts v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(gatewayconfigsResource, listOpts)

	_, err := c.Fake.Invokes(action, &v1alpha1.GatewayConfigList{})
	return err
}

// Patch applies the patch and returns the patched gatewayConfig.
func (c *FakeGatewayConfigs) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, opts v1.PatchOptions, subresources ...string) (result *v1alpha1.GatewayConfig, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(gatewayconfigsResource, name, pt, data, subresources...), &v1alpha1.GatewayConfig{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.GatewayConfig), err
}
