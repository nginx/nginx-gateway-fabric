package main

import (
	"io"
	"testing"

	. "github.com/onsi/gomega"
)

func TestRootCmdFlagValidation(t *testing.T) {
	tests := []struct {
		name              string
		expectedErrPrefix string
		args              []string
		wantErr           bool
	}{
		{
			name: "valid flags",
			args: []string{
				"--gateway-ctlr-name=k8s-gateway.nginx.org/nginx-gateway",
				"--gatewayclass=nginx",
			},
			wantErr: false,
		},
		{
			name: "gateway-ctlr-name is not set",
			args: []string{
				"--gatewayclass=nginx",
			},
			wantErr:           true,
			expectedErrPrefix: `required flag(s) "gateway-ctlr-name" not set`,
		},
		{
			name: "gateway-ctlr-name is set to empty string",
			args: []string{
				"--gateway-ctlr-name=",
				"--gatewayclass=nginx",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "" for "--gateway-ctlr-name" flag: must be set`,
		},
		{
			name: "gateway-ctlr-name is invalid",
			args: []string{
				"--gateway-ctlr-name=nginx-gateway",
				"--gatewayclass=nginx",
			},
			wantErr: true,
			expectedErrPrefix: `invalid argument "nginx-gateway" for "--gateway-ctlr-name" flag: invalid format; ` +
				"must be DOMAIN/PATH",
		},
		{
			name: "gatewayclass is not set",
			args: []string{
				"--gateway-ctlr-name=k8s-gateway.nginx.org/nginx-gateway",
			},
			wantErr:           true,
			expectedErrPrefix: `required flag(s) "gatewayclass" not set`,
		},
		{
			name: "gatewayclass is set to empty string",
			args: []string{
				"--gateway-ctlr-name=k8s-gateway.nginx.org/nginx-gateway",
				"--gatewayclass=",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "" for "--gatewayclass" flag: must be set`,
		},
		{
			name: "gatewayclass is invalid",
			args: []string{
				"--gateway-ctlr-name=k8s-gateway.nginx.org/nginx-gateway",
				"--gatewayclass=@",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "@" for "--gatewayclass" flag: invalid format`,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			g := NewGomegaWithT(t)

			rootCmd := createRootCommand()
			// discard any output generated by cobra
			rootCmd.SetOut(io.Discard)
			rootCmd.SetErr(io.Discard)

			rootCmd.SetArgs(test.args)
			err := rootCmd.Execute()

			if test.wantErr {
				g.Expect(err).To(HaveOccurred())
				g.Expect(err.Error()).To(HavePrefix(test.expectedErrPrefix))
			} else {
				g.Expect(err).ToNot(HaveOccurred())
			}
		})
	}
}
