package main

import (
	"io"
	"testing"

	. "github.com/onsi/gomega"
	"github.com/spf13/cobra"
)

type flagTestCase struct {
	name              string
	expectedErrPrefix string
	args              []string
	wantErr           bool
}

func testFlag(t *testing.T, cmd *cobra.Command, test flagTestCase) {
	g := NewGomegaWithT(t)
	// discard any output generated by cobra
	cmd.SetOut(io.Discard)
	cmd.SetErr(io.Discard)

	// override RunE to avoid executing the command
	cmd.RunE = func(cmd *cobra.Command, args []string) error {
		return nil
	}

	cmd.SetArgs(test.args)
	err := cmd.Execute()

	if test.wantErr {
		g.Expect(err).To(HaveOccurred())
		g.Expect(err.Error()).To(HavePrefix(test.expectedErrPrefix))
	} else {
		g.Expect(err).NotTo(HaveOccurred())
	}
}

func TestRootCmdFlagValidation(t *testing.T) {
	tests := []flagTestCase{
		{
			name: "valid flags",
			args: []string{
				"--gateway-ctlr-name=gateway.nginx.org/nginx-gateway",
				"--gatewayclass=nginx",
			},
			wantErr: false,
		},
		{
			name: "gateway-ctlr-name is not set",
			args: []string{
				"--gatewayclass=nginx",
			},
			wantErr:           true,
			expectedErrPrefix: `required flag(s) "gateway-ctlr-name" not set`,
		},
		{
			name: "gateway-ctlr-name is set to empty string",
			args: []string{
				"--gateway-ctlr-name=",
				"--gatewayclass=nginx",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "" for "--gateway-ctlr-name" flag: must be set`,
		},
		{
			name: "gateway-ctlr-name is invalid",
			args: []string{
				"--gateway-ctlr-name=nginx-gateway",
				"--gatewayclass=nginx",
			},
			wantErr: true,
			expectedErrPrefix: `invalid argument "nginx-gateway" for "--gateway-ctlr-name" flag: invalid format; ` +
				"must be DOMAIN/PATH",
		},
		{
			name: "gatewayclass is not set",
			args: []string{
				"--gateway-ctlr-name=gateway.nginx.org/nginx-gateway",
			},
			wantErr:           true,
			expectedErrPrefix: `required flag(s) "gatewayclass" not set`,
		},
		{
			name: "gatewayclass is set to empty string",
			args: []string{
				"--gateway-ctlr-name=gateway.nginx.org/nginx-gateway",
				"--gatewayclass=",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "" for "--gatewayclass" flag: must be set`,
		},
		{
			name: "gatewayclass is invalid",
			args: []string{
				"--gateway-ctlr-name=gateway.nginx.org/nginx-gateway",
				"--gatewayclass=@",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "@" for "--gatewayclass" flag: invalid format`,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			rootCmd := createRootCommand()
			testFlag(t, rootCmd, test)
		})
	}
}

func TestStaticModeCmdFlagValidation(t *testing.T) {
	tests := []flagTestCase{
		{
			name: "valid flags",
			args: []string{
				"--gateway=nginx-gateway/nginx",
				"--config=nginx-gateway-config",
				"--update-gatewayclass-status=true",
			},
			wantErr: false,
		},
		{
			name:    "valid flags, not set",
			args:    nil,
			wantErr: false,
		},
		{
			name: "gateway is set to empty string",
			args: []string{
				"--gateway=",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "" for "--gateway" flag: must be set`,
		},
		{
			name: "gateway is invalid",
			args: []string{
				"--gateway=nginx-gateway", // no namespace
			},
			wantErr: true,
			expectedErrPrefix: `invalid argument "nginx-gateway" for "--gateway" flag: invalid format; ` +
				"must be NAMESPACE/NAME",
		},
		{
			name: "config is set to empty string",
			args: []string{
				"--config=",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "" for "-c, --config" flag: must be set`,
		},
		{
			name: "config is set to invalid string",
			args: []string{
				"--config=!@#$",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "!@#$" for "-c, --config" flag: invalid format`,
		},
		{
			name: "update-gatewayclass-status is set to empty string",
			args: []string{
				"--update-gatewayclass-status=",
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "" for "--update-gatewayclass-status" flag: strconv.ParseBool`,
		},
		{
			name: "update-gatewayclass-status is invalid",
			args: []string{
				"--update-gatewayclass-status=invalid", // not a boolean
			},
			wantErr:           true,
			expectedErrPrefix: `invalid argument "invalid" for "--update-gatewayclass-status" flag: strconv.ParseBool`,
		},
	}

	for _, test := range tests {
		t.Run(test.name, func(t *testing.T) {
			cmd := createStaticModeCommand()
			testFlag(t, cmd, test)
		})
	}
}
